/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.JForms;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author programa
 */
public class Dashboard extends javax.swing.JFrame {
    private Connection conn;
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        try {
            // Cambia FlatLightLaf por el tema que quieras usar
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println("No se pudo aplicar FlatLaf");
        }
        initComponents();
        setLocationRelativeTo(null);
    }

    public Dashboard(Connection connection) {
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println("No se pudo aplicar FlatLaf");
        }
        initComponents();
        setLocationRelativeTo(null);
        menuJTb.setEnabledAt(5,false);
        menuJTb.setEnabledAt(6,false);
        estadosFinanicerosJMn.setEnabled(false);
        conn = connection;
        cargarDatosCuentas();
        actualizarDiarioTbl();
        cargarLibroMayor();
        establecerNumeroTransaccion();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                cerrarConnection();
            }
        });
    }
    private void cerrarConnection(){
        if (conn != null) {
            try {
                conn.close();
                System.out.println("Connection closed.");
            } catch (SQLException e) {
                System.out.println("Error closing connection.");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        singleDate1 = new raven.datetime.component.date.SingleDate();
        primerPanel = new javax.swing.JPanel();
        menuJTb = new javax.swing.JTabbedPane();
        transaccionesJPn = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fechaPck = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcionTxt = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ingresarBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        impuestoBtn = new javax.swing.JRadioButton();
        porcentajeLbl = new javax.swing.JLabel();
        porcentajeCmb = new javax.swing.JComboBox<>();
        cuentaLbl = new javax.swing.JLabel();
        cuentaCmb = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        montoTxt = new javax.swing.JFormattedTextField();
        cuentaDebeTxt = new javax.swing.JFormattedTextField();
        descuentoTxt = new javax.swing.JFormattedTextField();
        cuentaHaberTxt = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        numSpn = new javax.swing.JSpinner();
        diarioJPn = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        diarioTbl = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        legacyDiarioBtn = new javax.swing.JToggleButton();
        mayorJPn = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mayorTbl = new javax.swing.JTable();
        costosJPn = new javax.swing.JPanel();
        catalogoJPn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cuentasTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        agregarCuentaBtn = new javax.swing.JButton();
        estadosJPn = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        balanceTbl = new javax.swing.JTable();
        nuevoCicloBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tipoBalanceCmb = new javax.swing.JComboBox<>();
        estadosFinanJPn = new javax.swing.JPanel();
        barraJMn = new javax.swing.JMenuBar();
        sistemaJMn = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        cierreContableJMn = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        estadosFinanicerosJMn = new javax.swing.JMenuItem();
        temasJMn = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        ayudaJMn = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        salirJMn = new javax.swing.JMenu();
        salirBtn = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Contable");
        setResizable(false);

        primerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuJTb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingreso de Transacciones");
        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        jLabel3.setText("Fecha realizada");
        jLabel3.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        fechaPck.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        descripcionTxt.setColumns(20);
        descripcionTxt.setRows(5);
        descripcionTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane2.setViewportView(descripcionTxt);

        jLabel5.setText("Monto");
        jLabel5.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel6.setText("Cuentas afectadas");
        jLabel6.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel7.setText("IVA");
        jLabel7.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        ingresarBtn.setText("Ingresar transacci√≥n");
        ingresarBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        ingresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Cuenta del debe:");
        jLabel8.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel9.setText("Cuenta del haber:");
        jLabel9.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        impuestoBtn.setText("Si");
        impuestoBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        impuestoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impuestoBtnActionPerformed(evt);
            }
        });

        porcentajeLbl.setText("Porcentaje");
        porcentajeLbl.setEnabled(false);
        porcentajeLbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        porcentajeCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "13%" }));
        porcentajeCmb.setEnabled(false);
        porcentajeCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaLbl.setText("Cuenta");
        cuentaLbl.setEnabled(false);
        cuentaLbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "115", "212" }));
        cuentaCmb.setEnabled(false);
        cuentaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel11.setText("Descuento");
        jLabel11.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        montoTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        montoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaDebeTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        cuentaDebeTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        descuentoTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        descuentoTxt.setText("0.00");
        descuentoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaHaberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        cuentaHaberTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel12.setText("Descripci√≥n de la transacci√≥n");
        jLabel12.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel13.setText("Transacci√≥n No.");
        jLabel13.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        numSpn.setEnabled(false);

        javax.swing.GroupLayout transaccionesJPnLayout = new javax.swing.GroupLayout(transaccionesJPn);
        transaccionesJPn.setLayout(transaccionesJPnLayout);
        transaccionesJPnLayout.setHorizontalGroup(
            transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(828, 828, 828))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(31, 31, 31)
                                .addComponent(montoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(236, 236, 236))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cuentaDebeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(cuentaHaberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(impuestoBtn)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porcentajeLbl)
                                    .addComponent(cuentaLbl))
                                .addGap(49, 49, 49)
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porcentajeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(161, 161, 161))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fechaPck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transaccionesJPnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ingresarBtn)
                .addGap(37, 37, 37))
        );
        transaccionesJPnLayout.setVerticalGroup(
            transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fechaPck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(numSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(montoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cuentaDebeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cuentaHaberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(impuestoBtn)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(porcentajeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(porcentajeLbl))
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cuentaLbl)
                            .addComponent(cuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(ingresarBtn)
                .addGap(49, 49, 49))
        );

        menuJTb.addTab("Transacciones", transaccionesJPn);

        diarioTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Fecha", "Descripci√≥n", "Cuenta debe", "Monto debe", "Cuenta haber", "Monto haber", "Cuenta IVA", "IVA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        diarioTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(diarioTbl);
        if (diarioTbl.getColumnModel().getColumnCount() > 0) {
            diarioTbl.getColumnModel().getColumn(0).setPreferredWidth(2);
        }

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Registro de Transacciones");
        jLabel10.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        legacyDiarioBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        legacyDiarioBtn.setText("Mostrar legacy");
        legacyDiarioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                legacyDiarioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout diarioJPnLayout = new javax.swing.GroupLayout(diarioJPn);
        diarioJPn.setLayout(diarioJPnLayout);
        diarioJPnLayout.setHorizontalGroup(
            diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, diarioJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(diarioJPnLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(legacyDiarioBtn)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        diarioJPnLayout.setVerticalGroup(
            diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diarioJPnLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(legacyDiarioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        menuJTb.addTab("Libro diario", diarioJPn);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Libro Mayor");
        jLabel14.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        mayorTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cuenta", "Nombre", "Saldo inicial", "Debe", "Haber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mayorTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane5.setViewportView(mayorTbl);
        if (mayorTbl.getColumnModel().getColumnCount() > 0) {
            mayorTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout mayorJPnLayout = new javax.swing.GroupLayout(mayorJPn);
        mayorJPn.setLayout(mayorJPnLayout);
        mayorJPnLayout.setHorizontalGroup(
            mayorJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mayorJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(mayorJPnLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mayorJPnLayout.setVerticalGroup(
            mayorJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mayorJPnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        menuJTb.addTab("Libro Mayor", mayorJPn);

        javax.swing.GroupLayout costosJPnLayout = new javax.swing.GroupLayout(costosJPn);
        costosJPn.setLayout(costosJPnLayout);
        costosJPnLayout.setHorizontalGroup(
            costosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1170, Short.MAX_VALUE)
        );
        costosJPnLayout.setVerticalGroup(
            costosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 756, Short.MAX_VALUE)
        );

        menuJTb.addTab("Costos", costosJPn);

        cuentasTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cuenta", "Nombre", "Tipo"
            }
        ));
        cuentasTbl.setEnabled(false);
        cuentasTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane1.setViewportView(cuentasTbl);
        if (cuentasTbl.getColumnModel().getColumnCount() > 0) {
            cuentasTbl.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cuentas de EDC Solutions");
        jLabel2.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        agregarCuentaBtn.setText("Agregar cuenta");
        agregarCuentaBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout catalogoJPnLayout = new javax.swing.GroupLayout(catalogoJPn);
        catalogoJPn.setLayout(catalogoJPnLayout);
        catalogoJPnLayout.setHorizontalGroup(
            catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogoJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogoJPnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(agregarCuentaBtn)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89))
        );
        catalogoJPnLayout.setVerticalGroup(
            catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogoJPnLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(agregarCuentaBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205))
        );

        menuJTb.addTab("C√°talogo de cuentas", catalogoJPn);

        balanceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cuenta", "Nombre", "Debe", "Haber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        balanceTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane4.setViewportView(balanceTbl);

        nuevoCicloBtn.setText("Nuevo ciclo fiscal");
        nuevoCicloBtn.setEnabled(false);
        nuevoCicloBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        nuevoCicloBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoCicloBtnActionPerformed(evt);
            }
        });

        jButton4.setText("Imprimir");
        jButton4.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel4.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jLabel4.setText("Seleccionar tipo de balance");

        tipoBalanceCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        tipoBalanceCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Balance de comprobaci√≥n", "Estado de resultado", "Balance general" }));

        javax.swing.GroupLayout estadosJPnLayout = new javax.swing.GroupLayout(estadosJPn);
        estadosJPn.setLayout(estadosJPnLayout);
        estadosJPnLayout.setHorizontalGroup(
            estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadosJPnLayout.createSequentialGroup()
                .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(estadosJPnLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(estadosJPnLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(tipoBalanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nuevoCicloBtn)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        estadosJPnLayout.setVerticalGroup(
            estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadosJPnLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoCicloBtn)
                    .addComponent(jLabel4)
                    .addComponent(tipoBalanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(68, 68, 68))
        );

        tipoBalanceCmb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mostrarBalance(tipoBalanceCmb.getSelectedItem().toString());
            }
        });

        menuJTb.addTab("Balances", estadosJPn);

        javax.swing.GroupLayout estadosFinanJPnLayout = new javax.swing.GroupLayout(estadosFinanJPn);
        estadosFinanJPn.setLayout(estadosFinanJPnLayout);
        estadosFinanJPnLayout.setHorizontalGroup(
            estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1170, Short.MAX_VALUE)
        );
        estadosFinanJPnLayout.setVerticalGroup(
            estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 756, Short.MAX_VALUE)
        );

        menuJTb.addTab("Estados Financieros", estadosFinanJPn);

        primerPanel.add(menuJTb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1170, 800));
        menuJTb.getAccessibleContext().setAccessibleName("pestanas");

        barraJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        sistemaJMn.setText("Sistema");
        sistemaJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jMenuItem8.setText("Calcular Costo Producto");
        jMenuItem8.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        sistemaJMn.add(jMenuItem8);
        sistemaJMn.add(jSeparator4);

        cierreContableJMn.setText("Realizar Cierre Contable");
        cierreContableJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        cierreContableJMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cierreContableJMnActionPerformed(evt);
            }
        });
        sistemaJMn.add(cierreContableJMn);
        sistemaJMn.add(jSeparator5);

        estadosFinanicerosJMn.setText("Generar Estados Financieros");
        estadosFinanicerosJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        estadosFinanicerosJMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadosFinanicerosJMnActionPerformed(evt);
            }
        });
        sistemaJMn.add(estadosFinanicerosJMn);

        barraJMn.add(sistemaJMn);

        temasJMn.setText("Temas");
        temasJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jMenuItem6.setText("Tema Oscuro");
        jMenuItem6.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        temasJMn.add(jMenuItem6);

        jMenuItem7.setText("Tema Claro");
        jMenuItem7.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        temasJMn.add(jMenuItem7);

        barraJMn.add(temasJMn);

        ayudaJMn.setText("Ayuda");
        ayudaJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("Manual");
        jMenuItem1.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        ayudaJMn.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem2.setText("Soporte");
        ayudaJMn.add(jMenuItem2);
        ayudaJMn.add(jSeparator2);

        jMenuItem3.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem3.setText("Reportar problema");
        ayudaJMn.add(jMenuItem3);
        ayudaJMn.add(jSeparator3);

        jMenuItem4.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem4.setText("Buscar actualizaciones");
        ayudaJMn.add(jMenuItem4);

        jMenuItem5.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem5.setText("Acerca de");
        ayudaJMn.add(jMenuItem5);

        barraJMn.add(ayudaJMn);

        salirJMn.setText("Cerrar sesi√≥n");
        salirJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        salirBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        salirBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });
        salirJMn.add(salirBtn);

        barraJMn.add(salirJMn);

        setJMenuBar(barraJMn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(primerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(primerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_salirBtnActionPerformed

    private void impuestoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impuestoBtnActionPerformed
        mostrarImpuestos(impuestoBtn.isSelected());
    }//GEN-LAST:event_impuestoBtnActionPerformed

    private void ingresarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarBtnActionPerformed
        if(valido()){
            if(impuestoBtn.isSelected()){
                int cuentaIVA = Integer.parseInt(cuentaCmb.getSelectedItem().toString());
                ingresarTransaccion(cuentaIVA);
            }else{
                ingresarTransaccion();
            }
            actualizarDiarioTbl();
            cargarLibroMayor();
            montoTxt.setText("");
            descuentoTxt.setText("0.00");
            descripcionTxt.setText("");
            cuentaDebeTxt.setText("");
            cuentaHaberTxt.setText("");
            establecerNumeroTransaccion();
            impuestoBtn.setSelected(false);
            fechaPck.setDate(null);
            porcentajeCmb.setSelectedIndex(0);
            cuentaCmb.setSelectedIndex(0);
        }
    }//GEN-LAST:event_ingresarBtnActionPerformed

    private void cierreContableJMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cierreContableJMnActionPerformed
        saldarCuentas();
        mostrarMenusCierre(true, 5);
        mostrarBalance("Balance de comprobaci√≥n");
        transferirTransaccionesALegacy();
        actualizarDiarioTbl();
    }//GEN-LAST:event_cierreContableJMnActionPerformed

    private void saldarCuentas() {
        try {
            // Consulta para obtener todas las cuentas
            String sql = "SELECT codigo, naturaleza, saldo_inicial, debe, haber FROM sistemacontable.cuentas";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("codigo");
                int naturaleza = rs.getInt("naturaleza");
                double saldoInicial = rs.getDouble("saldo_inicial");
                double debe = rs.getDouble("debe");
                double haber = rs.getDouble("haber");

                if (naturaleza == 1) {
                    debe += saldoInicial;
                    debe = debe - haber;
                    haber = 0;
                } else if (naturaleza == 0) {
                    haber += saldoInicial;
                    haber = haber - debe;
                    debe = 0;
                }

                // Actualizamos la cuenta con los nuevos valores de debe, haber y saldo_inicial (en 0)
                String updateSql = "UPDATE sistemacontable.cuentas SET debe = ?, haber = ?, saldo_inicial = 0 WHERE codigo = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setDouble(1, debe);
                updateStmt.setDouble(2, haber);
                updateStmt.setInt(3, codigo);
                updateStmt.executeUpdate();
                updateStmt.close();
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            enviarError("No se pudo saldar cuentas");
        }
    }
    private void nuevoCicloBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoCicloBtnActionPerformed
        mostrarMenusCierre(false, 0);
        menuJTb.setEnabledAt(6,false);
        nuevosSaldosIniciales();
        cargarLibroMayor();
    }//GEN-LAST:event_nuevoCicloBtnActionPerformed

    private void nuevosSaldosIniciales() {
        try {
            // Consulta para obtener todas las cuentas
            String sql = "SELECT codigo, naturaleza, debe, haber FROM sistemacontable.cuentas";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("codigo");
                int naturaleza = rs.getInt("naturaleza");
                double debe = rs.getDouble("debe");
                double haber = rs.getDouble("haber");
                double saldoInicial = 0;

                if (naturaleza == 1) {
                    // Si es acreedora (naturaleza = 1), pasamos el valor de 'debe' a 'saldo_inicial'
                    saldoInicial = debe;
                    debe = 0; // Dejar el campo 'debe' en 0
                } else if (naturaleza == 0) {
                    // Si es deudora (naturaleza = 0), pasamos el valor de 'haber' a 'saldo_inicial'
                    saldoInicial = haber;
                    haber = 0; // Dejar el campo 'haber' en 0
                }

                // Actualizamos la cuenta con los nuevos valores de saldo_inicial, debe y haber
                String updateSql = "UPDATE sistemacontable.cuentas SET saldo_inicial = ?, debe = ?, haber = ? WHERE codigo = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setDouble(1, saldoInicial);
                updateStmt.setDouble(2, debe);
                updateStmt.setDouble(3, haber);
                updateStmt.setInt(4, codigo);
                updateStmt.executeUpdate();
                updateStmt.close();
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void estadosFinanicerosJMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadosFinanicerosJMnActionPerformed
        menuJTb.setEnabledAt(6,true);
        estadosFinanicerosJMn.setEnabled(false);
    }//GEN-LAST:event_estadosFinanicerosJMnActionPerformed

    private void legacyDiarioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legacyDiarioBtnActionPerformed
        if (legacyDiarioBtn.isSelected()) {
            actualizarDiarioTblLegacy();
        } else {
            actualizarDiarioTbl();
        }
    }//GEN-LAST:event_legacyDiarioBtnActionPerformed
    private void mostrarMenusCierre(boolean cierreNuevo, int indice){
        nuevoCicloBtn.setEnabled(cierreNuevo);
        cierreContableJMn.setEnabled(!cierreNuevo);
        menuJTb.setEnabledAt(0,!cierreNuevo);
        menuJTb.setSelectedIndex(indice);
        menuJTb.setEnabledAt(5,cierreNuevo);
        estadosFinanicerosJMn.setEnabled(cierreNuevo);
        agregarCuentaBtn.setEnabled(!cierreNuevo);
    }
    
    private void transferirTransaccionesALegacy() {
    String sqlInsert = "INSERT INTO sistemacontable.legacy_transacciones (numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) " +
                       "SELECT numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva FROM sistemacontable.transacciones";

    try (Statement stmt = conn.createStatement()) {
        // Ejecutar la inserci√≥n
        stmt.executeUpdate(sqlInsert);
        // Opci√≥n de eliminar las transacciones despu√©s de moverlas
        String sqlDelete = "DELETE FROM sistemacontable.transacciones";
        stmt.executeUpdate(sqlDelete);
        
        System.out.println("Transacciones transferidas a legacy_transacciones con √©xito.");
    } catch (SQLException ex) {
        enviarError("No se pudo transferir a legacy");
    }
}

    private void mostrarBalance(String tipoBalance) {
        DefaultTableModel modelo = (DefaultTableModel) balanceTbl.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de llenar

        String sql = "";

        switch (tipoBalance) {
            case "Balance de comprobaci√≥n" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas ORDER BY codigo";
            case "Estado de resultado" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas WHERE tipo_balance = 0 ORDER BY codigo";
            case "Balance general" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas WHERE tipo_balance = 1 ORDER BY codigo";
        }

        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Object[] fila = new Object[6];
                fila[0] = rs.getInt("codigo");
                fila[1] = rs.getString("nombre");
                fila[2] = rs.getBigDecimal("debe");
                fila[3] = rs.getBigDecimal("haber");
                modelo.addRow(fila);
            }
        } catch (SQLException ex) {
            enviarError("No se pudo generar balance"); // Manejo de excepciones
        }
    }

    private boolean valido(){
        try{
            LocalDate selectedDate = fechaPck.getDate();
            // Obt√©n la fecha de hoy
            LocalDate today = LocalDate.now();

            // Define el 1 de enero del a√±o actual
            LocalDate startDate = LocalDate.of(today.getYear(), 1, 1);

            // Verifica que la fecha seleccionada est√© entre el 1 de enero y hoy
            if((selectedDate == null) || (selectedDate.isBefore(startDate) || selectedDate.isAfter(today))){
                enviarError("Fecha no v√°lida");
                return false;
            }
        }catch(Exception e){
            enviarError("Fecha no v√°lida");
        }
        try{
            double monto = Double.parseDouble(montoTxt.getText());
            double descuento = Double.parseDouble(descuentoTxt.getText());
            if(monto<=0 || descuento<0){
                enviarError("Monto y Descuento deben ser positivos");
                return false;
            }
        }catch(Exception e){
            enviarError("Monto y Descuentos no pueden estar vac√≠os");
            return false;
        }
        try{
            if(cuentaDebeTxt.getText().isEmpty() || cuentaHaberTxt.getText().isEmpty()){
                enviarError("Los campos de las cuentas no pueden estar vac√≠os");
                return false;
            }
            int cuentaDebe = Integer.parseInt(cuentaDebeTxt.getText().trim());
            int cuentaHaber = Integer.parseInt(cuentaHaberTxt.getText().trim());
            String query = "SELECT COUNT(*) FROM sistemacontable.cuentas WHERE codigo = ?";

            // Verificar si ambas cuentas existen en el cat√°logo
            if (!existeEnCatalogo(query, cuentaDebe) || !existeEnCatalogo(query, cuentaHaber)) {
                enviarError("Las cuentas no coinciden con el cat√°logo");
                return false;
            }
        }catch(Exception e){
            enviarError("Erro al validar datos de las cuentas");
            return false;
        }
        if(descripcionTxt.getText().trim().isEmpty()){
            enviarError("Ingrese una descripci√≥n");
            return false;
        }
        return true;
    }
    private boolean existeEnCatalogo(String query, int cuenta) throws Exception {
        try (PreparedStatement stmt = conn.prepareStatement(query)) { // Usa la conexi√≥n existente
            stmt.setInt(1, cuenta);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Devuelve true si la cuenta existe en el cat√°logo
                }
            }
        }
        return false; // Devuelve false si la cuenta no existe en el cat√°logo
    }
    private void enviarError(String mensaje){
        JOptionPane.showMessageDialog(null, mensaje, "Error de transacci√≥n",JOptionPane.ERROR_MESSAGE);
    }
    
    private void ingresarTransaccion() {
        String sql = "INSERT INTO sistemacontable.transacciones (numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        BigDecimal monto = new BigDecimal(montoTxt.getText());
        monto = monto.subtract(new BigDecimal(descuentoTxt.getText()));

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, Integer.parseInt(numSpn.getValue().toString())); 
            pstmt.setDate(2, Date.valueOf(fechaPck.getDate()));
            pstmt.setString(3, descripcionTxt.getText());
            pstmt.setInt(4, Integer.parseInt(cuentaDebeTxt.getText().trim()));
            pstmt.setBigDecimal(5, monto);
            pstmt.setInt(6, Integer.parseInt(cuentaHaberTxt.getText().trim()));
            pstmt.setBigDecimal(7, monto);
            pstmt.setNull(8, Types.INTEGER); // O bien, puedes usar 0 si as√≠ lo requiere tu esquema
            pstmt.setNull(9, Types.DECIMAL); // O bien, puedes usar BigDecimal.ZERO si as√≠ lo requiere tu esquema

            pstmt.executeUpdate();
            modificarCuentas(
                    Integer.parseInt(cuentaDebeTxt.getText().trim()), // cuentaDebe
                    monto,                                        // montoDebe
                    Integer.parseInt(cuentaHaberTxt.getText().trim()), // cuentaHaber
                    monto,                                       // montoHaber
                    0,                                        // cuentaIVA
                    new BigDecimal(0)                                         // montoIVA
             );
            JOptionPane.showMessageDialog(null, "Transacci√≥n ingresada", "Transacci√≥n exitosa", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            enviarError("Error al ejecutar");
        }
    }
    private void ingresarTransaccion(int cuentaIVA) {
        String sql = "INSERT INTO sistemacontable.transacciones (numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        BigDecimal monto = new BigDecimal(montoTxt.getText());
        //int porcentajeSeleccionado = porcentajeCmb.getSelectedIndex();
        BigDecimal porcentajeIVA = BigDecimal.valueOf(0.13);
        BigDecimal montoIVA = monto.multiply(porcentajeIVA).setScale(2, RoundingMode.HALF_UP);
        BigDecimal montoDebe = monto;
        BigDecimal montoHaber = monto;
        
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, Integer.parseInt(numSpn.getValue().toString()));
            pstmt.setDate(2, Date.valueOf(fechaPck.getDate()));
            pstmt.setString(3, descripcionTxt.getText());
                if(cuentaIVA==115){
                    montoHaber = montoHaber.add(montoIVA);
                    pstmt.setInt(4, Integer.parseInt(cuentaDebeTxt.getText().trim()));
                    pstmt.setBigDecimal(5, montoDebe);
                    pstmt.setInt(6, Integer.parseInt(cuentaHaberTxt.getText().trim()));
                    pstmt.setBigDecimal(7, montoHaber);
                }else{
                    montoDebe = montoDebe.add(montoIVA);
                    pstmt.setInt(4, Integer.parseInt(cuentaDebeTxt.getText().trim()));
                    pstmt.setBigDecimal(5, montoDebe);
                    pstmt.setInt(6, Integer.parseInt(cuentaHaberTxt.getText().trim()));
                    pstmt.setBigDecimal(7, montoHaber);
                }
            pstmt.setInt(8, cuentaIVA);
            pstmt.setBigDecimal(9, montoIVA);

            pstmt.executeUpdate();
            modificarCuentas(
                    Integer.parseInt(cuentaDebeTxt.getText().trim()), // cuentaDebe
                    montoDebe,                                        // montoDebe
                    Integer.parseInt(cuentaHaberTxt.getText().trim()), // cuentaHaber
                    montoHaber,                                       // montoHaber
                    cuentaIVA,                                        // cuentaIVA
                    montoIVA                                         // montoIVA
             );
            JOptionPane.showMessageDialog(null, "Transacci√≥n ingresada", "Transacci√≥n exitosa", JOptionPane.PLAIN_MESSAGE);
        }catch (SQLException ex) {
            enviarError("Error al ejecutar");
        }
    }
    
    public void modificarCuentas(int cuentaDebe, BigDecimal montoDebe, int cuentaHaber, BigDecimal montoHaber, int cuentaIVA, BigDecimal montoIVA){
        String queryUpdateDebe = "UPDATE sistemacontable.cuentas SET debe = debe + ? WHERE codigo = ?";
        String queryUpdateHaber = "UPDATE sistemacontable.cuentas SET haber = haber + ? WHERE codigo = ?";
    
        try (PreparedStatement psDebe = conn.prepareStatement(queryUpdateDebe);
             PreparedStatement psHaber = conn.prepareStatement(queryUpdateHaber)) {

            // Actualizar el campo 'debe' para la cuenta deudora
            psDebe.setBigDecimal(1, montoDebe);
            psDebe.setInt(2, cuentaDebe);
            psDebe.executeUpdate();

            // Actualizar el campo 'haber' para la cuenta acreedora
            psHaber.setBigDecimal(1, montoHaber);
            psHaber.setInt(2, cuentaHaber);
            psHaber.executeUpdate();

            if(cuentaIVA==115){
                psDebe.setBigDecimal(1, montoIVA);
                psDebe.setInt(2, cuentaIVA);
                psDebe.executeUpdate();
            }else if(cuentaIVA==212){
                psHaber.setBigDecimal(1, montoIVA);
                psHaber.setInt(2, cuentaIVA);
                psHaber.executeUpdate();
            }


        } catch (SQLException e) {
            enviarError("Error al actualizar cuentas");
        }
    }
    public void cargarDatosCuentas() {
        String query = "SELECT codigo, nombre, tipo FROM sistemacontable.cuentas ORDER BY codigo";

        try {
            // Crear un modelo de tabla y limpiarlo para a√±adir datos
            DefaultTableModel model = (DefaultTableModel) cuentasTbl.getModel();
            model.setRowCount(0); // Limpiar las filas existentes

            // Ejecutar la consulta
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            // Llenar el modelo de tabla con los datos del ResultSet
            while (rs.next()) {
                Object[] row = {
                    rs.getString("codigo"),
                    rs.getString("nombre"),
                    rs.getString("tipo")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar datos: " + e.getMessage());
        }
    }
    private void actualizarDiarioTbl() {
        String sql = "SELECT * FROM sistemacontable.transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // Limpiar la tabla anterior antes de actualizar
            DefaultTableModel model = (DefaultTableModel) diarioTbl.getModel();
            model.setRowCount(0); // Limpiar la tabla

            // Llenar la tabla con datos de transacciones
            while (rs.next()) {
                Object[] row = new Object[] {
                    rs.getInt("numero"),
                    rs.getDate("fecha"),
                    rs.getString("descripcion"),
                    rs.getInt("cuenta_debe_id"),
                    rs.getBigDecimal("monto_debe"),
                    rs.getInt("cuenta_haber_id"),
                    rs.getBigDecimal("monto_haber"),
                    rs.getInt("cuenta_iva_id"),
                    rs.getBigDecimal("monto_iva")
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            enviarError("Error al actualizar el diario");
        }
    }
    private void actualizarDiarioTblLegacy() {
        String sql = "SELECT * FROM sistemacontable.legacy_transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // Limpiar la tabla anterior antes de actualizar
            DefaultTableModel model = (DefaultTableModel) diarioTbl.getModel();
            model.setRowCount(0); // Limpiar la tabla

            // Llenar la tabla con datos de transacciones
            while (rs.next()) {
                Object[] row = new Object[] {
                    rs.getInt("numero"),
                    rs.getDate("fecha"),
                    rs.getString("descripcion"),
                    rs.getInt("cuenta_debe_id"),
                    rs.getBigDecimal("monto_debe"),
                    rs.getInt("cuenta_haber_id"),
                    rs.getBigDecimal("monto_haber"),
                    rs.getInt("cuenta_iva_id"),
                    rs.getBigDecimal("monto_iva")
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            enviarError("Error al actualizar el diario");
        }
    }
    
    public void cargarLibroMayor() {
        String query = "SELECT codigo, nombre, saldo_inicial, debe, haber FROM sistemacontable.cuentas ORDER BY codigo";

        try {
            // Crear un modelo de tabla y limpiarlo para a√±adir datos
            DefaultTableModel model = (DefaultTableModel) mayorTbl.getModel();
            model.setRowCount(0); // Limpiar las filas existentes

            // Ejecutar la consulta
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            // Llenar el modelo de tabla con los datos del ResultSet
            while (rs.next()) {
                Object[] row = {
                    rs.getString("codigo"),
                    rs.getString("nombre"),
                    rs.getString("saldo_inicial"),
                    rs.getString("debe"),
                    rs.getString("haber")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar datos: " + e.getMessage());
        }
    }

   private void establecerNumeroTransaccion() {
        String sql = "SELECT MAX(numero) AS max_numero FROM sistemacontable.transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                int maxNumero = rs.getInt("max_numero");
                if (maxNumero > 0) {
                    // Si se encontr√≥ un n√∫mero, incrementamos en 1
                    numSpn.setValue(maxNumero + 1);
                } else {
                    // Si no se encontr√≥, se establece el n√∫mero en 1
                    numSpn.setValue(1);
                }
            }
        } catch (SQLException ex) {
            enviarError("Error al obtener el n√∫mero de transacci√≥n");
        }
    }

    private void mostrarImpuestos(boolean mostrar){
        cuentaCmb.setEnabled(mostrar);
        cuentaLbl.setEnabled(mostrar);
        porcentajeCmb.setEnabled(mostrar);
        porcentajeLbl.setEnabled(mostrar);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarCuentaBtn;
    private javax.swing.JMenu ayudaJMn;
    private javax.swing.JTable balanceTbl;
    private javax.swing.JMenuBar barraJMn;
    private javax.swing.JPanel catalogoJPn;
    private javax.swing.JMenuItem cierreContableJMn;
    private javax.swing.JPanel costosJPn;
    private javax.swing.JComboBox<String> cuentaCmb;
    private javax.swing.JFormattedTextField cuentaDebeTxt;
    private javax.swing.JFormattedTextField cuentaHaberTxt;
    private javax.swing.JLabel cuentaLbl;
    private javax.swing.JTable cuentasTbl;
    private javax.swing.JTextArea descripcionTxt;
    private javax.swing.JFormattedTextField descuentoTxt;
    private javax.swing.JPanel diarioJPn;
    private javax.swing.JTable diarioTbl;
    private javax.swing.JPanel estadosFinanJPn;
    private javax.swing.JMenuItem estadosFinanicerosJMn;
    private javax.swing.JPanel estadosJPn;
    private com.github.lgooddatepicker.components.DatePicker fechaPck;
    private javax.swing.JRadioButton impuestoBtn;
    private javax.swing.JButton ingresarBtn;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JToggleButton legacyDiarioBtn;
    private javax.swing.JPanel mayorJPn;
    private javax.swing.JTable mayorTbl;
    private javax.swing.JTabbedPane menuJTb;
    private javax.swing.JFormattedTextField montoTxt;
    private javax.swing.JButton nuevoCicloBtn;
    private javax.swing.JSpinner numSpn;
    private javax.swing.JComboBox<String> porcentajeCmb;
    private javax.swing.JLabel porcentajeLbl;
    private javax.swing.JPanel primerPanel;
    private javax.swing.JMenuItem salirBtn;
    private javax.swing.JMenu salirJMn;
    private raven.datetime.component.date.SingleDate singleDate1;
    private javax.swing.JMenu sistemaJMn;
    private javax.swing.JMenu temasJMn;
    private javax.swing.JComboBox<String> tipoBalanceCmb;
    private javax.swing.JPanel transaccionesJPn;
    // End of variables declaration//GEN-END:variables

}
