/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.JForms;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Camilo Medrano
 */
public class Dashboard extends javax.swing.JFrame {
    private Connection conn;
    int meses = 0;
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        try {
            // Cambia FlatLightLaf por el tema que quieras usar
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println("No se pudo aplicar FlatLaf");
        }
        initComponents();
        setLocationRelativeTo(null);
    }

    public Dashboard(Connection connection) {
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println("No se pudo aplicar FlatLaf");
        }
        initComponents();
        setLocationRelativeTo(null);
        menuJTb.setEnabledAt(5,false);
        menuJTb.setEnabledAt(6,false);
        estadosFinanicerosJMn.setEnabled(false);
        conn = connection;
        cargarDatosCuentas();
        actualizarDiarioTbl();
        cargarLibroMayor();
        
        establecerNumeroTransaccion();
        
        dejarACeroCosteo();
        mostrarTablaPuestos();
        mostrarTablaResumenCosteo();
        mostrarTablaCostos();
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                cerrarConnection();
            }
        });
    }
    private void cerrarConnection(){
        if (conn != null) {
            try {
                conn.close();
                System.out.println("Connection closed.");
            } catch (SQLException e) {
                System.out.println("Error closing connection.");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        singleDate1 = new raven.datetime.component.date.SingleDate();
        primerPanel = new javax.swing.JPanel();
        menuJTb = new javax.swing.JTabbedPane();
        transaccionesJPn = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fechaPck = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcionTxt = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ingresarBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        impuestoBtn = new javax.swing.JRadioButton();
        porcentajeLbl = new javax.swing.JLabel();
        porcentajeCmb = new javax.swing.JComboBox<>();
        cuentaLbl = new javax.swing.JLabel();
        cuentaCmb = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        montoTxt = new javax.swing.JFormattedTextField();
        cuentaDebeTxt = new javax.swing.JFormattedTextField();
        descuentoTxt = new javax.swing.JFormattedTextField();
        cuentaHaberTxt = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        numSpn = new javax.swing.JSpinner();
        diarioJPn = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        diarioTbl = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        legacyDiarioBtn = new javax.swing.JToggleButton();
        mayorJPn = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mayorTbl = new javax.swing.JTable();
        costosJPn = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        beneficioPorcentajeTxt = new javax.swing.JFormattedTextField();
        calcularCostoBtn = new javax.swing.JButton();
        categoriasCosteoJTb = new javax.swing.JTabbedPane();
        personalJPn = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        puestoTxt = new javax.swing.JTextField();
        salarioTxt = new javax.swing.JFormattedTextField();
        cantidadTrabajadoresSpn = new javax.swing.JSpinner();
        horasTrabajadasTxt = new javax.swing.JFormattedTextField();
        vacacionsChk = new javax.swing.JCheckBox();
        jLabel35 = new javax.swing.JLabel();
        categoriaPersonalCmb = new javax.swing.JComboBox<>();
        aguinaldoChk = new javax.swing.JCheckBox();
        diasAguinaldoCmb = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        nuevoPuestoBtn = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        personalTbl = new javax.swing.JTable();
        jLabel36 = new javax.swing.JLabel();
        cuentaAsociadaPuestoTxt = new javax.swing.JFormattedTextField();
        gastosCostosJPn = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        agregarCostoBtn = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        gastosTbl = new javax.swing.JTable();
        gastoNombreTxt = new javax.swing.JTextField();
        gastoMontoTxt = new javax.swing.JFormattedTextField();
        gastoCategoriaCmb = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        cuentaAsociadaGastosTxt = new javax.swing.JFormattedTextField();
        resumenJPn = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        resumenCosteoTbl = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        mesesTrabajoSpn = new javax.swing.JSpinner();
        jLabel29 = new javax.swing.JLabel();
        frecuenciaVentaCmb = new javax.swing.JComboBox<>();
        catalogoJPn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cuentasTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        agregarCuentaBtn = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        nuevaCuentaNombreTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        categoriaCuentaCmb = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        naturalezaCmb = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        balanceCmb = new javax.swing.JComboBox<>();
        nuevaCuentaBtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        nuevaCuentaEFBtn = new javax.swing.JRadioButton();
        eFCmb = new javax.swing.JComboBox<>();
        estadosJPn = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        balanceTbl = new javax.swing.JTable();
        nuevoCicloBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tipoBalanceCmb = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        estadosFinanJPn = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        analiticoTbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        barraJMn = new javax.swing.JMenuBar();
        sistemaJMn = new javax.swing.JMenu();
        costeoJMn = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        cierreContableJMn = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        estadosFinanicerosJMn = new javax.swing.JMenuItem();
        temasJMn = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        ayudaJMn = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        salirJMn = new javax.swing.JMenu();
        salirBtn = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Contable");
        setResizable(false);

        primerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuJTb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingreso de Transacciones");
        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        jLabel3.setText("Fecha realizada");
        jLabel3.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        fechaPck.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        descripcionTxt.setColumns(20);
        descripcionTxt.setRows(5);
        descripcionTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane2.setViewportView(descripcionTxt);

        jLabel5.setText("Monto");
        jLabel5.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel6.setText("Cuentas afectadas");
        jLabel6.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel7.setText("IVA");
        jLabel7.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        ingresarBtn.setText("Ingresar transacción");
        ingresarBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        ingresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Cuenta del debe:");
        jLabel8.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel9.setText("Cuenta del haber:");
        jLabel9.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        impuestoBtn.setText("Si");
        impuestoBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        impuestoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impuestoBtnActionPerformed(evt);
            }
        });

        porcentajeLbl.setText("Porcentaje");
        porcentajeLbl.setEnabled(false);
        porcentajeLbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        porcentajeCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "13%" }));
        porcentajeCmb.setEnabled(false);
        porcentajeCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaLbl.setText("Cuenta");
        cuentaLbl.setEnabled(false);
        cuentaLbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "115", "212" }));
        cuentaCmb.setEnabled(false);
        cuentaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel11.setText("Descuento");
        jLabel11.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        montoTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        montoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaDebeTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        cuentaDebeTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        descuentoTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        descuentoTxt.setText("0.00");
        descuentoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cuentaHaberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        cuentaHaberTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel12.setText("Descripción de la transacción");
        jLabel12.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        jLabel13.setText("Transacción No.");
        jLabel13.setFont(new java.awt.Font("JetBrains Mono", 1, 17)); // NOI18N

        numSpn.setEnabled(false);

        javax.swing.GroupLayout transaccionesJPnLayout = new javax.swing.GroupLayout(transaccionesJPn);
        transaccionesJPn.setLayout(transaccionesJPnLayout);
        transaccionesJPnLayout.setHorizontalGroup(
            transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(828, 828, 828))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(31, 31, 31)
                                .addComponent(montoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(236, 236, 236))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cuentaDebeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(cuentaHaberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(impuestoBtn)
                            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porcentajeLbl)
                                    .addComponent(cuentaLbl))
                                .addGap(49, 49, 49)
                                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porcentajeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(161, 161, 161))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, transaccionesJPnLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fechaPck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transaccionesJPnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ingresarBtn)
                .addGap(37, 37, 37))
        );
        transaccionesJPnLayout.setVerticalGroup(
            transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transaccionesJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fechaPck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(numSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(montoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE)
                .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cuentaDebeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cuentaHaberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(transaccionesJPnLayout.createSequentialGroup()
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(impuestoBtn)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(porcentajeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(porcentajeLbl))
                        .addGroup(transaccionesJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cuentaLbl)
                            .addComponent(cuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(ingresarBtn)
                .addGap(49, 49, 49))
        );

        menuJTb.addTab("Transacciones", transaccionesJPn);

        diarioTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Fecha", "Descripción", "Cuenta debe", "Monto debe", "Cuenta haber", "Monto haber", "Cuenta IVA", "IVA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        diarioTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(diarioTbl);
        if (diarioTbl.getColumnModel().getColumnCount() > 0) {
            diarioTbl.getColumnModel().getColumn(0).setPreferredWidth(2);
        }

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Registro de Transacciones");
        jLabel10.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        legacyDiarioBtn.setText("Mostrar legacy");
        legacyDiarioBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        legacyDiarioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                legacyDiarioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout diarioJPnLayout = new javax.swing.GroupLayout(diarioJPn);
        diarioJPn.setLayout(diarioJPnLayout);
        diarioJPnLayout.setHorizontalGroup(
            diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, diarioJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(diarioJPnLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(legacyDiarioBtn)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        diarioJPnLayout.setVerticalGroup(
            diarioJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diarioJPnLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(legacyDiarioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        menuJTb.addTab("Libro diario", diarioJPn);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Libro Mayor");
        jLabel14.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        mayorTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cuenta", "Nombre", "Saldo inicial", "Debe", "Haber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mayorTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane5.setViewportView(mayorTbl);
        if (mayorTbl.getColumnModel().getColumnCount() > 0) {
            mayorTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout mayorJPnLayout = new javax.swing.GroupLayout(mayorJPn);
        mayorJPn.setLayout(mayorJPnLayout);
        mayorJPnLayout.setHorizontalGroup(
            mayorJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mayorJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(mayorJPnLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mayorJPnLayout.setVerticalGroup(
            mayorJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mayorJPnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        menuJTb.addTab("Libro Mayor", mayorJPn);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Método por Orden de Producción");
        jLabel18.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        jLabel24.setText("Porcentaje de beneficio:");
        jLabel24.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        beneficioPorcentajeTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        beneficioPorcentajeTxt.setText("0.00");
        beneficioPorcentajeTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        beneficioPorcentajeTxt.setToolTipText("Ingrese el porcentaje no el decimal");

        calcularCostoBtn.setText("Calcular costeo");
        calcularCostoBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        calcularCostoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularCostoBtnActionPerformed(evt);
            }
        });

        categoriasCosteoJTb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel30.setText("Puesto:");
        jLabel30.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel31.setText("Salario nominal mensual:");
        jLabel31.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel32.setText("Prestaciones:");
        jLabel32.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel33.setText("Cantidad de trabajadores:");
        jLabel33.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel34.setText("Horas trabajadas (semana):");
        jLabel34.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        puestoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        salarioTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        cantidadTrabajadoresSpn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        horasTrabajadasTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        horasTrabajadasTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        vacacionsChk.setSelected(true);
        vacacionsChk.setText("Vacaciones");
        vacacionsChk.setEnabled(false);
        vacacionsChk.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel35.setText("Categoría");
        jLabel35.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        categoriaPersonalCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mano de obra directa", "Administrativo" }));
        categoriaPersonalCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        aguinaldoChk.setText("Aguinaldo");
        aguinaldoChk.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        aguinaldoChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aguinaldoChkActionPerformed(evt);
            }
        });

        diasAguinaldoCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10 días", "15 días", "18 días" }));
        diasAguinaldoCmb.setEnabled(false);
        diasAguinaldoCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("ISSS");
        jCheckBox1.setEnabled(false);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("AFP");
        jCheckBox2.setEnabled(false);

        nuevoPuestoBtn.setText("Agregar");
        nuevoPuestoBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        nuevoPuestoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoPuestoBtnActionPerformed(evt);
            }
        });

        personalTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Puesto", "Salario nominal", "Cantidad de trabajadores", "Horas trabajadas", "Categoría", "Total prestaciones", "Salario real", "Catalogo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        personalTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 14)); // NOI18N
        jScrollPane9.setViewportView(personalTbl);

        jLabel36.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jLabel36.setText("Cuenta en cátalago asociada");

        cuentaAsociadaPuestoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout personalJPnLayout = new javax.swing.GroupLayout(personalJPn);
        personalJPn.setLayout(personalJPnLayout);
        personalJPnLayout.setHorizontalGroup(
            personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalJPnLayout.createSequentialGroup()
                        .addComponent(jScrollPane9)
                        .addContainerGap())
                    .addGroup(personalJPnLayout.createSequentialGroup()
                        .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personalJPnLayout.createSequentialGroup()
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(categoriaPersonalCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(horasTrabajadasTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addGap(18, 18, 18)
                                .addComponent(puestoTxt))
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(18, 18, 18)
                                .addComponent(cantidadTrabajadoresSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addGap(18, 18, 18)
                                .addComponent(salarioTxt)))
                        .addGap(92, 92, 92)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox1))
                                .addContainerGap(478, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personalJPnLayout.createSequentialGroup()
                                .addComponent(aguinaldoChk)
                                .addGap(18, 18, 18)
                                .addComponent(diasAguinaldoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(personalJPnLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nuevoPuestoBtn)
                                        .addGap(84, 84, 84))
                                    .addGroup(personalJPnLayout.createSequentialGroup()
                                        .addGap(89, 89, 89)
                                        .addComponent(cuentaAsociadaPuestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(personalJPnLayout.createSequentialGroup()
                                .addComponent(vacacionsChk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel36)
                                .addGap(14, 14, 14))))))
        );
        personalJPnLayout.setVerticalGroup(
            personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalJPnLayout.createSequentialGroup()
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalJPnLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(puestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vacacionsChk)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personalJPnLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel36)))
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalJPnLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(salarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(personalJPnLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aguinaldoChk)
                            .addComponent(diasAguinaldoCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cuentaAsociadaPuestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33)
                    .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cantidadTrabajadoresSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel32)
                        .addComponent(jCheckBox1)))
                .addGap(18, 18, 18)
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addComponent(horasTrabajadasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addGap(18, 18, 18)
                .addGroup(personalJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriaPersonalCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(nuevoPuestoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        categoriasCosteoJTb.addTab("Personal", personalJPn);

        jLabel25.setText("Nombre:");
        jLabel25.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel26.setText("Categoría:");
        jLabel26.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel27.setText("Monto mensual:");
        jLabel27.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        agregarCostoBtn.setText("Agregar");
        agregarCostoBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        agregarCostoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarCostoBtnActionPerformed(evt);
            }
        });

        gastosTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Monto mensual", "Categoría", "Catalogo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gastosTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane7.setViewportView(gastosTbl);

        gastoNombreTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        gastoMontoTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        gastoMontoTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        gastoCategoriaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Costos directos de fabricación", "Gastos de comercialización" }));
        gastoCategoriaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N

        jLabel37.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jLabel37.setText("Cuenta en cátalago asociada:");

        cuentaAsociadaGastosTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout gastosCostosJPnLayout = new javax.swing.GroupLayout(gastosCostosJPn);
        gastosCostosJPn.setLayout(gastosCostosJPnLayout);
        gastosCostosJPnLayout.setHorizontalGroup(
            gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                        .addGroup(gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gastoNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gastoMontoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addGap(26, 26, 26)
                                .addComponent(cuentaAsociadaGastosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(59, 59, 59)
                        .addGroup(gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarCostoBtn)
                            .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gastoCategoriaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        gastosCostosJPnLayout.setVerticalGroup(
            gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gastosCostosJPnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel27)
                    .addComponent(jLabel26)
                    .addComponent(gastoNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gastoMontoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gastoCategoriaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(gastosCostosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarCostoBtn)
                    .addComponent(jLabel37)
                    .addComponent(cuentaAsociadaGastosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        categoriasCosteoJTb.addTab("Gastos y costos", gastosCostosJPn);

        resumenCosteoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Signo", "Nombre", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resumenCosteoTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane8.setViewportView(resumenCosteoTbl);

        jLabel28.setText("Tiempo requerido (meses):");
        jLabel28.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        mesesTrabajoSpn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        mesesTrabajoSpn.setValue(1);

        jLabel29.setText("Frecuencia de venta de licencia:");
        jLabel29.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        frecuenciaVentaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Una vez", "Un año", "Dos años", "Tres años" }));
        frecuenciaVentaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout resumenJPnLayout = new javax.swing.GroupLayout(resumenJPn);
        resumenJPn.setLayout(resumenJPnLayout);
        resumenJPnLayout.setHorizontalGroup(
            resumenJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resumenJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resumenJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(resumenJPnLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mesesTrabajoSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(209, 209, 209)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(frecuenciaVentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
        resumenJPnLayout.setVerticalGroup(
            resumenJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resumenJPnLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(resumenJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(mesesTrabajoSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(frecuenciaVentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        categoriasCosteoJTb.addTab("Resumen", resumenJPn);

        javax.swing.GroupLayout costosJPnLayout = new javax.swing.GroupLayout(costosJPn);
        costosJPn.setLayout(costosJPnLayout);
        costosJPnLayout.setHorizontalGroup(
            costosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(costosJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, costosJPnLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(calcularCostoBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(beneficioPorcentajeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, costosJPnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(categoriasCosteoJTb, javax.swing.GroupLayout.PREFERRED_SIZE, 1144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        costosJPnLayout.setVerticalGroup(
            costosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(costosJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(costosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcularCostoBtn)
                    .addComponent(jLabel24)
                    .addComponent(beneficioPorcentajeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(categoriasCosteoJTb, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        menuJTb.addTab("Costeo", costosJPn);

        cuentasTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cuenta", "Nombre", "Tipo"
            }
        ));
        cuentasTbl.setEnabled(false);
        cuentasTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane1.setViewportView(cuentasTbl);
        if (cuentasTbl.getColumnModel().getColumnCount() > 0) {
            cuentasTbl.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cuentas de EDC Solutions");
        jLabel2.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        agregarCuentaBtn.setText("Agregar cuenta");
        agregarCuentaBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel19.setText("Nombre:");
        jLabel19.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        nuevaCuentaNombreTxt.setEnabled(false);
        nuevaCuentaNombreTxt.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel20.setText("Categoría:");
        jLabel20.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        categoriaCuentaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoriaCuentaCmb.setEnabled(false);
        categoriaCuentaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel21.setText("Naturaleza:");
        jLabel21.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        naturalezaCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Acrededora", "Deudora" }));
        naturalezaCmb.setEnabled(false);
        naturalezaCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel22.setText("Balance:");
        jLabel22.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        balanceCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Resultado", "General", "Capital" }));
        balanceCmb.setEnabled(false);
        balanceCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        nuevaCuentaBtn.setText("Agregar");
        nuevaCuentaBtn.setEnabled(false);
        nuevaCuentaBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel23.setText("¿Es una cuenta presente en el estado financiero?");
        jLabel23.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        nuevaCuentaEFBtn.setText("Si");
        nuevaCuentaEFBtn.setEnabled(false);
        nuevaCuentaEFBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        eFCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        eFCmb.setEnabled(false);
        eFCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout catalogoJPnLayout = new javax.swing.GroupLayout(catalogoJPn);
        catalogoJPn.setLayout(catalogoJPnLayout);
        catalogoJPnLayout.setHorizontalGroup(
            catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogoJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogoJPnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogoJPnLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addComponent(nuevaCuentaEFBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eFCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(agregarCuentaBtn)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(catalogoJPnLayout.createSequentialGroup()
                            .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel20)
                                .addComponent(jLabel19))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nuevaCuentaNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(categoriaCuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel21)
                                .addComponent(jLabel22))
                            .addGap(18, 18, 18)
                            .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(naturalezaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(balanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(129, 129, 129)
                            .addComponent(nuevaCuentaBtn))))
                .addGap(89, 89, 89))
        );
        catalogoJPnLayout.setVerticalGroup(
            catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogoJPnLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(agregarCuentaBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogoJPnLayout.createSequentialGroup()
                        .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(nuevaCuentaNombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoriaCuentaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nuevaCuentaBtn)
                            .addComponent(jLabel20)))
                    .addGroup(catalogoJPnLayout.createSequentialGroup()
                        .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(naturalezaCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(balanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addGroup(catalogoJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(nuevaCuentaEFBtn)
                    .addComponent(eFCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        menuJTb.addTab("Cátalogo de cuentas", catalogoJPn);

        balanceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cuenta", "Nombre", "Debe", "Haber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        balanceTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        jScrollPane4.setViewportView(balanceTbl);

        nuevoCicloBtn.setText("Nuevo ciclo fiscal");
        nuevoCicloBtn.setEnabled(false);
        nuevoCicloBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        nuevoCicloBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoCicloBtnActionPerformed(evt);
            }
        });

        jButton4.setText("Imprimir");
        jButton4.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel4.setText("Seleccionar tipo de balance");
        jLabel4.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        tipoBalanceCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Balance de comprobación", "Estado de resultado", "Balance general" }));
        tipoBalanceCmb.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Balances de cuentas EDC Solutions");
        jLabel15.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        javax.swing.GroupLayout estadosJPnLayout = new javax.swing.GroupLayout(estadosJPn);
        estadosJPn.setLayout(estadosJPnLayout);
        estadosJPnLayout.setHorizontalGroup(
            estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosJPnLayout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(estadosJPnLayout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(tipoBalanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nuevoCicloBtn)))
                    .addComponent(jButton4))
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosJPnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addContainerGap())
        );
        estadosJPnLayout.setVerticalGroup(
            estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosJPnLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(estadosJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoCicloBtn)
                    .addComponent(jLabel4)
                    .addComponent(tipoBalanceCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton4)
                .addGap(17, 17, 17))
        );

        tipoBalanceCmb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mostrarBalance(tipoBalanceCmb.getSelectedItem().toString());
            }
        });

        menuJTb.addTab("Balances", estadosJPn);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Método análitico");
        jLabel16.setFont(new java.awt.Font("JetBrains Mono", 0, 24)); // NOI18N

        jLabel17.setText("*La empresa no cuenta con inventario por lo tanto se han omitido las operaciones que lo contienen");
        jLabel17.setFont(new java.awt.Font("JetBrains Mono", 0, 14)); // NOI18N

        analiticoTbl.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        analiticoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Signo", "Código", "Nombre", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(analiticoTbl);

        jButton1.setText("Imprimir");
        jButton1.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        javax.swing.GroupLayout estadosFinanJPnLayout = new javax.swing.GroupLayout(estadosFinanJPn);
        estadosFinanJPn.setLayout(estadosFinanJPnLayout);
        estadosFinanJPnLayout.setHorizontalGroup(
            estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadosFinanJPnLayout.createSequentialGroup()
                .addGroup(estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosFinanJPnLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE))
                    .addGroup(estadosFinanJPnLayout.createSequentialGroup()
                        .addGroup(estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(estadosFinanJPnLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(estadosFinanJPnLayout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1081, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        estadosFinanJPnLayout.setVerticalGroup(
            estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadosFinanJPnLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(estadosFinanJPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosFinanJPnLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadosFinanJPnLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(26, 26, 26))))
        );

        menuJTb.addTab("Estados Financieros", estadosFinanJPn);

        primerPanel.add(menuJTb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1170, 800));
        menuJTb.getAccessibleContext().setAccessibleName("pestanas");

        barraJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        sistemaJMn.setText("Sistema");
        sistemaJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        costeoJMn.setText("Calcular Costo Producto");
        costeoJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        costeoJMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costeoJMnActionPerformed(evt);
            }
        });
        sistemaJMn.add(costeoJMn);
        sistemaJMn.add(jSeparator4);

        cierreContableJMn.setText("Realizar Cierre Contable");
        cierreContableJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        cierreContableJMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cierreContableJMnActionPerformed(evt);
            }
        });
        sistemaJMn.add(cierreContableJMn);
        sistemaJMn.add(jSeparator5);

        estadosFinanicerosJMn.setText("Generar Estados Financieros");
        estadosFinanicerosJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N
        estadosFinanicerosJMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadosFinanicerosJMnActionPerformed(evt);
            }
        });
        sistemaJMn.add(estadosFinanicerosJMn);

        barraJMn.add(sistemaJMn);

        temasJMn.setText("Temas");
        temasJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jMenuItem6.setText("Tema Oscuro");
        jMenuItem6.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        temasJMn.add(jMenuItem6);

        jMenuItem7.setText("Tema Claro");
        jMenuItem7.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        temasJMn.add(jMenuItem7);

        barraJMn.add(temasJMn);

        ayudaJMn.setText("Ayuda");
        ayudaJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("Manual");
        jMenuItem1.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        ayudaJMn.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem2.setText("Soporte");
        ayudaJMn.add(jMenuItem2);
        ayudaJMn.add(jSeparator2);

        jMenuItem3.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem3.setText("Reportar problema");
        ayudaJMn.add(jMenuItem3);
        ayudaJMn.add(jSeparator3);

        jMenuItem4.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem4.setText("Buscar actualizaciones");
        ayudaJMn.add(jMenuItem4);

        jMenuItem5.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        jMenuItem5.setText("Acerca de");
        ayudaJMn.add(jMenuItem5);

        barraJMn.add(ayudaJMn);

        salirJMn.setText("Cerrar sesión");
        salirJMn.setFont(new java.awt.Font("JetBrains Mono", 0, 17)); // NOI18N

        salirBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        salirBtn.setFont(new java.awt.Font("JetBrains Mono", 0, 16)); // NOI18N
        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });
        salirJMn.add(salirBtn);

        barraJMn.add(salirJMn);

        setJMenuBar(barraJMn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(primerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(primerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_salirBtnActionPerformed

    private void impuestoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impuestoBtnActionPerformed
        mostrarImpuestos(impuestoBtn.isSelected());
    }//GEN-LAST:event_impuestoBtnActionPerformed

    private void ingresarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarBtnActionPerformed
        if(valido()){
            if(impuestoBtn.isSelected()){
                int cuentaIVA = Integer.parseInt(cuentaCmb.getSelectedItem().toString());
                ingresarTransaccion(cuentaIVA);
            }else{
                ingresarTransaccion();
            }
            actualizarDiarioTbl();
            cargarLibroMayor();
            montoTxt.setText("");
            descuentoTxt.setText("0.00");
            descripcionTxt.setText("");
            cuentaDebeTxt.setText("");
            cuentaHaberTxt.setText("");
            establecerNumeroTransaccion();
            impuestoBtn.setSelected(false);
            fechaPck.setDate(null);
            porcentajeCmb.setSelectedIndex(0);
            cuentaCmb.setSelectedIndex(0);
            mostrarImpuestos(impuestoBtn.isSelected());
        }
    }//GEN-LAST:event_ingresarBtnActionPerformed

    private void cierreContableJMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cierreContableJMnActionPerformed
        enviarCostosACuentas();
        saldarCuentas();
        mostrarMenusCierre(true, 5);
        mostrarBalance("Balance de comprobación");
        transferirTransaccionesALegacy();
        actualizarDiarioTbl();
    }//GEN-LAST:event_cierreContableJMnActionPerformed

    private void enviarCostosACuentas(){
        pagarPlanilla();
        pagarGastos();
    }
    
    private void pagarPlanilla() {
        String selectPuestos = "SELECT id, puesto, salario_real, catalogo FROM sistemacontable.puestos";
        String insertTransaccion = "INSERT INTO sistemacontable.transacciones (fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber) VALUES (?, ?, ?, ?, ?, ?)";
        String updateCuentaDebe = "UPDATE sistemacontable.cuentas SET debe = debe + ? WHERE codigo = ?";
        String updateCuentaHaber = "UPDATE sistemacontable.cuentas SET haber = haber + ? WHERE codigo = 111";

        try (
            PreparedStatement pstmtSelect = conn.prepareStatement(selectPuestos);
            ResultSet rs = pstmtSelect.executeQuery()) {

            // Procesamos cada fila de la tabla sistemacontable.puestos
            while (rs.next()) {
                int cuentaDebe = rs.getInt("catalogo");
                String nombre = rs.getString("puesto");
                BigDecimal salarioReal = rs.getBigDecimal("salario_real");

                // Multiplicamos el salario por 12
                BigDecimal salarioAnual = salarioReal.multiply(BigDecimal.valueOf(12));

                // Insertamos una transacción en sistemacontable.transacciones
                try (PreparedStatement pstmtInsert = conn.prepareStatement(insertTransaccion)) {
                    pstmtInsert.setDate(1, Date.valueOf(LocalDate.now()));  // Fecha actual
                    pstmtInsert.setString(2, "Pago a " + nombre);  // Descripción
                    pstmtInsert.setInt(3, cuentaDebe);  // Cuenta en el debe
                    pstmtInsert.setBigDecimal(4, salarioAnual);  // Monto en el debe
                    pstmtInsert.setInt(5, 111);  // Cuenta en el haber (111: Caja)
                    pstmtInsert.setBigDecimal(6, salarioAnual);  // Monto en el haber
                    pstmtInsert.executeUpdate();
                }

                // Actualizamos el saldo en la cuenta de debe en sistemacontable.cuentas
                try (PreparedStatement pstmtUpdateCuentaDebe = conn.prepareStatement(updateCuentaDebe)) {
                    pstmtUpdateCuentaDebe.setBigDecimal(1, salarioAnual); // Sumar el salario anual al debe
                    pstmtUpdateCuentaDebe.setInt(2, cuentaDebe); // Código de la cuenta en el debe
                    pstmtUpdateCuentaDebe.executeUpdate();
                }

                // Actualizamos el saldo en el lado del haber de la cuenta 111 en sistemacontable.cuentas
                try (PreparedStatement pstmtUpdateCuentaHaber = conn.prepareStatement(updateCuentaHaber)) {
                    pstmtUpdateCuentaHaber.setBigDecimal(1, salarioAnual); // Sumar el salario anual al haber
                    pstmtUpdateCuentaHaber.executeUpdate();
                }
            }

        } catch (SQLException e) {
            enviarError("Error al pagar planilla");
        }
    }

    private void pagarGastos() {
        String selectGastos = "SELECT id, nombre, monto, catalogo FROM sistemacontable.gastos";
        String insertTransaccion = "INSERT INTO sistemacontable.transacciones (fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber) VALUES (?, ?, ?, ?, ?, ?)";
        String updateCuentaDebe = "UPDATE sistemacontable.cuentas SET debe = debe + ? WHERE codigo = ?";
        String updateCuentaHaber = "UPDATE sistemacontable.cuentas SET haber = haber + ? WHERE codigo = 111";

        try (
            PreparedStatement pstmtSelect = conn.prepareStatement(selectGastos);
            ResultSet rs = pstmtSelect.executeQuery()) {

            // Procesamos cada fila de la tabla sistemacontable.gastos
            while (rs.next()) {
                int cuentaDebe = rs.getInt("catalogo");
                String nombre = rs.getString("nombre");
                BigDecimal monto = rs.getBigDecimal("monto");

                // Multiplicamos el monto por 12
                BigDecimal montoAnual = monto.multiply(BigDecimal.valueOf(12));

                // Insertamos una transacción en sistemacontable.transacciones
                try (PreparedStatement pstmtInsert = conn.prepareStatement(insertTransaccion)) {
                    pstmtInsert.setDate(1, Date.valueOf(LocalDate.now()));  // Fecha actual
                    pstmtInsert.setString(2, "Pago a " + nombre);  // Descripción
                    pstmtInsert.setInt(3, cuentaDebe);  // Cuenta en el debe
                    pstmtInsert.setBigDecimal(4, montoAnual);  // Monto en el debe
                    pstmtInsert.setInt(5, 111);  // Cuenta en el haber (111: Caja)
                    pstmtInsert.setBigDecimal(6, montoAnual);  // Monto en el haber
                    pstmtInsert.executeUpdate();
                }

                // Actualizamos el saldo en la cuenta de debe en sistemacontable.cuentas
                try (PreparedStatement pstmtUpdateCuentaDebe = conn.prepareStatement(updateCuentaDebe)) {
                    pstmtUpdateCuentaDebe.setBigDecimal(1, montoAnual); // Sumar el monto anual al debe
                    pstmtUpdateCuentaDebe.setInt(2, cuentaDebe); // Código de la cuenta en el debe
                    pstmtUpdateCuentaDebe.executeUpdate();
                }

                // Actualizamos el saldo en el lado del haber de la cuenta 111 en sistemacontable.cuentas
                try (PreparedStatement pstmtUpdateCuentaHaber = conn.prepareStatement(updateCuentaHaber)) {
                    pstmtUpdateCuentaHaber.setBigDecimal(1, montoAnual); // Sumar el monto anual al haber
                    pstmtUpdateCuentaHaber.executeUpdate();
                }
            }

        } catch (SQLException e) {
            enviarError("Error al pagar gastos");
        }
    }


    private void saldarCuentas() {
        try {
            // Consulta para obtener todas las cuentas
            String sql = "SELECT codigo, naturaleza, saldo_inicial, debe, haber FROM sistemacontable.cuentas";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("codigo");
                int naturaleza = rs.getInt("naturaleza");
                double saldoInicial = rs.getDouble("saldo_inicial");
                double debe = rs.getDouble("debe");
                double haber = rs.getDouble("haber");

                if (naturaleza == 0) {
                    debe += saldoInicial;
                    debe = debe - haber;
                    haber = 0;
                } else if (naturaleza == 1) {
                    haber += saldoInicial;
                    haber = haber - debe;
                    debe = 0;
                }

                // Actualizamos la cuenta con los nuevos valores de debe, haber y saldo_inicial (en 0)
                String updateSql = "UPDATE sistemacontable.cuentas SET debe = ?, haber = ?, saldo_inicial = 0 WHERE codigo = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setDouble(1, debe);
                updateStmt.setDouble(2, haber);
                updateStmt.setInt(3, codigo);
                updateStmt.executeUpdate();
                updateStmt.close();
            }

            rs.close();
            stmt.close();
            definirCuenta611();
        } catch (SQLException e) {
            enviarError("No se pudo saldar cuentas");
        }
    }
    private void definirCuenta611() {
    String calcularBalanceSql = "SELECT SUM(debe) - SUM(haber) AS balance FROM sistemacontable.cuentas WHERE tipo_balance = 0";
    String actualizarCuenta611Sql = "UPDATE sistemacontable.cuentas SET haber = ? WHERE codigo = 611";

    try (
        PreparedStatement calcularStmt = conn.prepareStatement(calcularBalanceSql);
        ResultSet rs = calcularStmt.executeQuery()) {

        // Verificamos si hay resultado
        if (rs.next()) {
            BigDecimal balance = rs.getBigDecimal("balance");

            // Actualizamos la cuenta 611 con el balance calculado
            try (PreparedStatement actualizarStmt = conn.prepareStatement(actualizarCuenta611Sql)) {
                actualizarStmt.setBigDecimal(1, balance);
                int rowsUpdated = actualizarStmt.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("La cuenta 611 se actualizó exitosamente con el balance calculado.");
                } else {
                    System.out.println("No se actualizó la cuenta 611.");
                }
            }
        } else {
            System.out.println("No se encontraron datos para calcular el balance.");
        }

        definirUtilidad();
    } catch (SQLException e) {
        enviarError("Error al definir cuenta 611");
    }
}
    
    private void definirUtilidad() {
        String selectSql = "SELECT haber FROM sistemacontable.cuentas WHERE codigo = ?";
        String updateSql = "UPDATE sistemacontable.cuentas SET haber = haber + ? WHERE codigo = ?";

        try (PreparedStatement selectStmt = conn.prepareStatement(selectSql);
             PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {

            // Obtener el valor de 'haber' de la cuenta 611
            selectStmt.setInt(1, 611);
            ResultSet rs611 = selectStmt.executeQuery();
            double haber611 = rs611.next() ? rs611.getDouble("haber") : 0;
            rs611.close();

            // Obtener el valor de 'haber' de la cuenta 311
            selectStmt.setInt(1, 311);
            ResultSet rs311 = selectStmt.executeQuery();
            double haber311 = rs311.next() ? rs311.getDouble("haber") : 0;
            rs311.close();

            // Calcular la suma de los valores 'haber' de las cuentas 611 y 311
            double totalHaber = haber611 + haber311;

            // Actualizar el valor de 'haber' de la cuenta 321 sumándole el total calculado
            updateStmt.setDouble(1, totalHaber);
            updateStmt.setInt(2, 321);
            updateStmt.executeUpdate();

        } catch (SQLException e) {
            enviarError("No se pudo calcular la utilidad");
        }
    }

    private void nuevoCicloBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoCicloBtnActionPerformed
        mostrarMenusCierre(false, 0);
        menuJTb.setEnabledAt(6,false);
        nuevosSaldosIniciales();
        cargarLibroMayor();
        nuevoCicloBtn.setEnabled(false);
        establecerNumeroTransaccion();
    }//GEN-LAST:event_nuevoCicloBtnActionPerformed

    private void nuevosSaldosIniciales() {
        try {
            // Consulta para obtener todas las cuentas
            String sql = "SELECT codigo, naturaleza, debe, haber FROM sistemacontable.cuentas";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("codigo");
                int naturaleza = rs.getInt("naturaleza");
                double debe = rs.getDouble("debe");
                double haber = rs.getDouble("haber");
                double saldoInicial = 0;

                if (naturaleza == 0) {
                    // Si es acreedora (naturaleza = 0), pasamos el valor de 'debe' a 'saldo_inicial'
                    saldoInicial = debe;
                    debe = 0; // Dejar el campo 'debe' en 0
                } else if (naturaleza == 1) {
                    // Si es deudora (naturaleza = 1), pasamos el valor de 'haber' a 'saldo_inicial'
                    saldoInicial = haber;
                    haber = 0; // Dejar el campo 'haber' en 0
                }

                // Actualizamos la cuenta con los nuevos valores de saldo_inicial, debe y haber
                String updateSql = "UPDATE sistemacontable.cuentas SET saldo_inicial = ?, debe = ?, haber = ? WHERE codigo = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setDouble(1, saldoInicial);
                updateStmt.setDouble(2, debe);
                updateStmt.setDouble(3, haber);
                updateStmt.setInt(4, codigo);
                updateStmt.executeUpdate();
                updateStmt.close();
            }

            rs.close();
            stmt.close();
            borrarUtilidadLiquidez();
            flujoneto();
        } catch (SQLException e) {
            enviarError("Error al realizar nuevo ciclo contable");
        }
    }
    
    private void flujoneto() {
        // Consultas para obtener Ventas netas y Compras netas
        String queryVentasNetas = "SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Ventas netas'";
        String queryComprasNetas = "SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Compras netas'";

        // Consulta para actualizar el saldo inicial de la cuenta de capital (código 311)
        String updateSaldoInicial = "UPDATE sistemacontable.cuentas SET saldo_inicial = saldo_inicial + ? WHERE codigo = 311";

        try (PreparedStatement stmtVentasNetas = conn.prepareStatement(queryVentasNetas);
             PreparedStatement stmtComprasNetas = conn.prepareStatement(queryComprasNetas);
             PreparedStatement stmtUpdateSaldoInicial = conn.prepareStatement(updateSaldoInicial)) {

            // Obtener Ventas netas
            BigDecimal ventasNetas = executeSingleValueQuery(stmtVentasNetas);
            // Obtener Compras netas
            BigDecimal comprasNetas = executeSingleValueQuery(stmtComprasNetas);

            // Calcular el flujo neto: Ventas netas - Compras netas
            BigDecimal flujoNeto = ventasNetas.subtract(comprasNetas);

            // Actualizar el saldo inicial de la cuenta de capital (código 311)
            stmtUpdateSaldoInicial.setBigDecimal(1, flujoNeto);
            int rowsUpdated = stmtUpdateSaldoInicial.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("El flujo neto se ha sumado correctamente al saldo inicial de la cuenta de capital.");
            } else {
                System.out.println("No se encontró la cuenta de capital con el código 311.");
            }

        } catch (SQLException e) {
            enviarError("Error al calcular y actualizar el flujo neto.");
        }
    }
    private void borrarUtilidadLiquidez() {
        String sql = "UPDATE sistemacontable.cuentas SET saldo_inicial = 0, debe = 0, haber = 0 WHERE codigo = ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Establecer los valores de la cuenta 321 a 0
            stmt.setInt(1, 321);
            stmt.executeUpdate();

            // Establecer los valores de la cuenta 611 a 0
            stmt.setInt(1, 611);
            stmt.executeUpdate();

        } catch (SQLException e) {
            enviarError("Error al borrar cuentas 611 y 321");
        }
    }

    private void estadosFinanicerosJMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadosFinanicerosJMnActionPerformed
        menuJTb.setEnabledAt(6,true);
        estadosFinanicerosJMn.setEnabled(false);
        saldarCuentasEstadoFinancieros();
        mostrarTablaAnalitico();
        nuevoCicloBtn.setEnabled(true);
    }//GEN-LAST:event_estadosFinanicerosJMnActionPerformed

    private void saldarCuentasEstadoFinancieros() {
        String queryCuentas = "SELECT codigo, debe, haber, naturaleza FROM sistemacontable.cuentas WHERE codigo IN (SELECT codigo FROM sistemacontable.analitico WHERE codigo IS NOT NULL)";
        String updateAnalitico = "UPDATE sistemacontable.analitico SET cantidad = ? WHERE codigo = ?";
        String updateCuentas = "UPDATE sistemacontable.cuentas SET debe = 0, haber = 0 WHERE codigo = ?";

        try (PreparedStatement stmtCuentas = conn.prepareStatement(queryCuentas);
             PreparedStatement stmtAnalitico = conn.prepareStatement(updateAnalitico);
             PreparedStatement stmtUpdateCuentas = conn.prepareStatement(updateCuentas);
             ResultSet rs = stmtCuentas.executeQuery()) {

            while (rs.next()) {
                int codigo = rs.getInt("codigo");
                BigDecimal debe = rs.getBigDecimal("debe");
                BigDecimal haber = rs.getBigDecimal("haber");
                int naturaleza = rs.getInt("naturaleza");

                // Determinar el saldo basado en la naturaleza
                BigDecimal saldo = (naturaleza == 0) ? debe : haber;

                // Actualizar el saldo en la tabla analitico
                stmtAnalitico.setBigDecimal(1, saldo);
                stmtAnalitico.setInt(2, codigo);
                stmtAnalitico.executeUpdate();

                // Poner a cero debe o haber en la tabla cuentas
                stmtUpdateCuentas.setInt(1, codigo);
                stmtUpdateCuentas.executeUpdate();
            }
            formulaEstadosFinancieros();

        } catch (SQLException e) {
            enviarError("No se pudo generar estado financiero");
        }
    }
    
    private void formulaEstadosFinancieros() {
        try {
            // Preparar las consultas para obtener valores necesarios
            PreparedStatement stmtVentasTotales = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Ventas totales'");
            PreparedStatement stmtDevolucionesVentas = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Devoluciones sobre ventas'");
            PreparedStatement stmtRebajasVentas = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Rebajas sobre ventas'");
            PreparedStatement stmtGastosVentas = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Gastos sobre ventas'"); // Nuevo

            PreparedStatement stmtCompras = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Compras'");
            PreparedStatement stmtGastosCompras = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Gastos sobre compras'");
            PreparedStatement stmtDevolucionesCompras = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Devoluciones sobre compras'");
            PreparedStatement stmtRebajasCompras = conn.prepareStatement("SELECT cantidad FROM sistemacontable.analitico WHERE nombre = 'Rebajas sobre compras'");

            // Ejecutar consultas y obtener los valores de las cuentas
            BigDecimal ventasTotales = executeSingleValueQuery(stmtVentasTotales);
            BigDecimal devolucionesVentas = executeSingleValueQuery(stmtDevolucionesVentas);
            BigDecimal rebajasVentas = executeSingleValueQuery(stmtRebajasVentas);
            BigDecimal gastosVentas = executeSingleValueQuery(stmtGastosVentas); // Obtener "Gastos sobre ventas"

            BigDecimal compras = executeSingleValueQuery(stmtCompras);
            BigDecimal gastosCompras = executeSingleValueQuery(stmtGastosCompras);
            BigDecimal devolucionesCompras = executeSingleValueQuery(stmtDevolucionesCompras);
            BigDecimal rebajasCompras = executeSingleValueQuery(stmtRebajasCompras);

            // Calcular Ventas netas (restar devoluciones, rebajas y gastos sobre ventas)
            BigDecimal ventasNetas = ventasTotales.subtract(devolucionesVentas.add(rebajasVentas).add(gastosVentas));

            // Calcular Compras totales
            BigDecimal comprasTotales = compras.add(gastosCompras);

            // Calcular Compras netas
            BigDecimal comprasNetas = comprasTotales.subtract(devolucionesCompras.add(rebajasCompras));

            // Actualizar los resultados en la tabla analitico solo para Ventas netas, Compras totales y Compras netas
            updateCantidadInAnalitico("Ventas netas", ventasNetas);
            updateCantidadInAnalitico("Compras totales", comprasTotales);
            updateCantidadInAnalitico("Compras netas", comprasNetas);

            System.out.println("Fórmulas aplicadas y valores actualizados exitosamente.");
        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("Error al calcular las fórmulas del estado financiero.");
        }
    }


    // Método auxiliar para ejecutar consultas que devuelven un solo valor
    private BigDecimal executeSingleValueQuery(PreparedStatement stmt) throws SQLException {
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getBigDecimal("cantidad");
        }
        return BigDecimal.ZERO; // Si no se encuentra la cuenta, retornar 0
    }

    // Método auxiliar para actualizar el valor en la tabla analitico
    private void updateCantidadInAnalitico(String nombreCuenta, BigDecimal cantidad) throws SQLException {
        PreparedStatement stmtUpdate = conn.prepareStatement("UPDATE sistemacontable.analitico SET cantidad = ? WHERE nombre = ?");
        stmtUpdate.setBigDecimal(1, cantidad);
        stmtUpdate.setString(2, nombreCuenta);
        stmtUpdate.executeUpdate();
        stmtUpdate.close();
    }
    private void mostrarTablaAnalitico() {
        String queryAnalitico = "SELECT signo, codigo, nombre, cantidad FROM sistemacontable.analitico ORDER BY orden";

        try (PreparedStatement stmt = conn.prepareStatement(queryAnalitico);
             ResultSet rs = stmt.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) analiticoTbl.getModel();
            model.setRowCount(0); // Limpiar la tabla antes de llenarla

            while (rs.next()) {
                // Leer los valores de la fila
                int signo = rs.getInt("signo");
                Integer codigo = rs.getInt("codigo"); // Esto puede ser nulo, maneja según sea necesario
                String nombre = rs.getString("nombre");
                BigDecimal cantidad = rs.getBigDecimal("cantidad");

                // Transformar el signo
                String signoTransformado = "";
                switch (signo) {
                    case 0:
                        signoTransformado = ""; // Sin signo
                        break;
                    case 1:
                        signoTransformado = "-"; // Menos
                        break;
                    case -1:
                        signoTransformado = "="; // Igual
                        break;
                    case 2:
                        signoTransformado = "+"; // Más
                        break;
                    default:
                        break;
                }

                // Agregar la fila al modelo de la tabla
                model.addRow(new Object[]{signoTransformado, codigo, nombre, cantidad});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Manejo de errores
        }
    }
    private void legacyDiarioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legacyDiarioBtnActionPerformed
        if (legacyDiarioBtn.isSelected()) {
            actualizarDiarioTblLegacy();
        } else {
            actualizarDiarioTbl();
        }
    }//GEN-LAST:event_legacyDiarioBtnActionPerformed

    public void mostrarTablaResumenCosteo() {
        // Obtén el modelo de la tabla y limpia las filas actuales
        DefaultTableModel model = (DefaultTableModel) resumenCosteoTbl.getModel();
        model.setRowCount(0); // Limpia las filas actuales de la tabla, si hay alguna

        String sql = "SELECT " +
                     "CASE " +
                     "WHEN signo = 0 THEN '' " +
                     "WHEN signo = 1 THEN '+' " +
                     "WHEN signo = 2 THEN '=' " +
                     "END AS signo, " +
                     "costo, " +
                     "precio " +
                     "FROM sistemacontable.costeo " +
                     "ORDER BY id";

        try (
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            // Recorre el ResultSet y añade cada fila al modelo de la tabla
            while (rs.next()) {
                Object[] row = {
                    rs.getString("signo"),     // Columna de signo ya formateada
                    rs.getString("costo"),     // Columna de costo
                    rs.getBigDecimal("precio") // Columna de precio
                };
                model.addRow(row);
            }

        } catch (SQLException e) {
            enviarError("No se pudo cargar datos del resumen de coste");
        }
    }
    private void costeoJMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costeoJMnActionPerformed
        menuJTb.setSelectedIndex(3);
    }//GEN-LAST:event_costeoJMnActionPerformed

    private void aguinaldoChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aguinaldoChkActionPerformed
        diasAguinaldoCmb.setEnabled(aguinaldoChk.isSelected());
    }//GEN-LAST:event_aguinaldoChkActionPerformed

    private void nuevoPuestoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoPuestoBtnActionPerformed
        if(validarPersonal()){
            actualizarTablaPuestos();
            mostrarTablaPuestos();
            borrarPersonal();
        }
    }//GEN-LAST:event_nuevoPuestoBtnActionPerformed

    private void moverATablaResumenPersonal() {
        String selectPuestos = "SELECT id, categoria, salario_real FROM sistemacontable.puestos";
        String updateCosteo = "UPDATE sistemacontable.costeo SET precio = precio + ? WHERE id = ?";

        try (
             PreparedStatement pstmtSelect = conn.prepareStatement(selectPuestos);
             ResultSet rs = pstmtSelect.executeQuery()) {

            // Procesamos cada fila de la tabla sistemacontable.puestos
            while (rs.next()) {
                int categoria = rs.getInt("categoria");
                BigDecimal salarioReal = rs.getBigDecimal("salario_real");

                // Multiplicamos el salario real por el número de meses
                BigDecimal salarioConMeses = salarioReal.multiply(BigDecimal.valueOf(meses));

                int idToUpdate = (categoria == 0) ? 1 : 4; // id=1 si es categoría 0, id=4 si es categoría 1

                // Ejecutamos la actualización en la tabla sistemacontable.costeo
                try (PreparedStatement pstmtUpdateCosteo = conn.prepareStatement(updateCosteo)) {
                    pstmtUpdateCosteo.setBigDecimal(1, salarioConMeses); // Usamos salario multiplicado por meses
                    pstmtUpdateCosteo.setInt(2, idToUpdate);
                    pstmtUpdateCosteo.executeUpdate();
                }
            }

        } catch (SQLException e) {
            enviarError("Error al enviar a la tabla resumen");
        }
    }
    private void borrarPersonal(){
        puestoTxt.setText("");
        salarioTxt.setText("");
        cantidadTrabajadoresSpn.setValue(0);
        horasTrabajadasTxt.setText("");
        categoriaPersonalCmb.setSelectedIndex(0);
        aguinaldoChk.setSelected(false);
        diasAguinaldoCmb.setEnabled(aguinaldoChk.isSelected());
        cuentaAsociadaPuestoTxt.setText("");
    }
    private boolean validarPersonal(){
        return true;
    }
    public void actualizarTablaPuestos() {
        String puesto = puestoTxt.getText(); // JTextField para el puesto
        BigDecimal salarioNominal = new BigDecimal(salarioTxt.getText()); // JTextField para salario nominal
        int cantidadTrabajadores = Integer.parseInt(cantidadTrabajadoresSpn.getValue().toString());
        int horasTrabajadas = Integer.parseInt(horasTrabajadasTxt.getText()); // JTextField para horas trabajadas
        int categoria = categoriaPersonalCmb.getSelectedIndex(); // JComboBox para categoría (0 o 1)
        int aguinaldo;
        BigDecimal prestaciones;
        if(aguinaldoChk.isSelected()){
            aguinaldo = diasAguinaldoCmb.getSelectedIndex();
            prestaciones = calcularPrestaciones(salarioNominal, aguinaldo);
        }else{
            prestaciones = calcularPrestaciones(salarioNominal, -1);
        }
        BigDecimal salarioReal = salarioNominal.add(prestaciones).multiply(new BigDecimal(cantidadTrabajadores));
        int catalogo = Integer.parseInt(cuentaAsociadaPuestoTxt.getText());

        // Cambiamos la consulta a INSERT en lugar de UPDATE
        String sql = "INSERT INTO sistemacontable.puestos (puesto, salario_nominal, cantidad_trabajadores, "
                   + "horas_trabajadas, categoria, prestaciones, salario_real, catalogo) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Configura los parámetros de la consulta
            pstmt.setString(1, puesto);
            pstmt.setBigDecimal(2, salarioNominal);
            pstmt.setInt(3, cantidadTrabajadores);
            pstmt.setInt(4, horasTrabajadas);
            pstmt.setInt(5, categoria);
            pstmt.setBigDecimal(6, prestaciones);
            pstmt.setBigDecimal(7, salarioReal);
            pstmt.setInt(8, catalogo);

            // Ejecuta la consulta de inserción
            int rowsInserted = pstmt.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Inserción exitosa de " + rowsInserted + " registro(s).");
            } else {
                System.out.println("No se insertó el registro.");
            }

        } catch (SQLException e) {
            enviarError("No se pudo ingresar personal");
        }
    }
        
    public BigDecimal calcularPrestaciones(BigDecimal salarioNominal, int aguinaldo) {
        // 1. Calcular Vacaciones
        BigDecimal vacaciones = salarioNominal.divide(new BigDecimal(30), RoundingMode.HALF_UP) // salario diario
                .multiply(new BigDecimal(1.25)) // 1.25 días de vacaciones mensuales
                .multiply(new BigDecimal(1.30)); // 30% adicional por vacaciones

        // 2. Calcular Aguinaldo Mensual según los años de servicio (aguinaldo: 0 = menos de 3 años, 1 = 3-10 años, 2 = más de 10 años)
        int diasAguinaldo = 0;
        if (aguinaldo == 0) {
            diasAguinaldo = 10;
        } else if (aguinaldo == 1) {
            diasAguinaldo = 15;
        } else if (aguinaldo == 2){
            diasAguinaldo = 18;
        }
        BigDecimal aguinaldoMensual = salarioNominal.multiply(new BigDecimal(diasAguinaldo))
                .divide(new BigDecimal(12 * 30), RoundingMode.HALF_UP);

        // 3. Calcular AFP (7.25% del salario nominal)
        BigDecimal afp = salarioNominal.multiply(new BigDecimal(0.0725));

        // 4. Calcular ISSS (3% del salario nominal)
        BigDecimal isss = salarioNominal.multiply(new BigDecimal(0.03));

        // Sumar todas las prestaciones
        BigDecimal prestaciones = vacaciones.add(aguinaldoMensual).add(afp).add(isss);

        // Redondear a dos decimales y devolver
        return prestaciones.setScale(2, RoundingMode.HALF_UP);
    }

    public void mostrarTablaPuestos() {
        // Configura el modelo de tabla para personalTbl
        DefaultTableModel model = (DefaultTableModel) personalTbl.getModel();
        model.setRowCount(0); // Limpia las filas actuales de la tabla, si hay alguna

        String sql = "SELECT puesto, salario_nominal, cantidad_trabajadores, horas_trabajadas, categoria, prestaciones, salario_real, catalogo "
                   + "FROM sistemacontable.puestos ORDER BY id";

        try (
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            // Recorre el ResultSet y añade cada fila al modelo de la tabla
            while (rs.next()) {
                // Convertimos el valor de categoria a su representación textual
                String categoria = rs.getInt("categoria") == 1 ? "Administrativo" : "Mano de obra directa";

                Object[] row = {
                    rs.getString("puesto"),
                    rs.getBigDecimal("salario_nominal"),
                    rs.getInt("cantidad_trabajadores"),
                    rs.getInt("horas_trabajadas"),
                    categoria, // Columna categoría formateada
                    rs.getBigDecimal("prestaciones"),
                    rs.getBigDecimal("salario_real"),
                    rs.getInt("catalogo")
                };
                model.addRow(row);
            }

        } catch (SQLException e) {
            enviarError("No se pudo mostrar tabla de puestos");
        }
    }
    private void agregarCostoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarCostoBtnActionPerformed
        if(validarCostos()){
            agregarATablaCostos();
            mostrarTablaCostos();
            gastoNombreTxt.setText("");
            gastoMontoTxt.setText("");
            gastoCategoriaCmb.setSelectedIndex(0);
            cuentaAsociadaGastosTxt.setText("");
        }
    }//GEN-LAST:event_agregarCostoBtnActionPerformed

    private boolean validarCostos(){
        return true;
    }
    private void agregarATablaCostos() {
        // Obtener los valores de los campos de texto y el combo box
        String nombre = gastoNombreTxt.getText();
        BigDecimal monto = new BigDecimal(gastoMontoTxt.getText());  // Usar BigDecimal para el monto
        int categoria = gastoCategoriaCmb.getSelectedIndex();  // Obtiene el índice seleccionado en el JComboBox
        int catalogo = Integer.parseInt(cuentaAsociadaGastosTxt.getText());

        // SQL para insertar en la base de datos
        String query = "INSERT INTO sistemacontable.gastos (nombre, monto, categoria, catalogo) VALUES (?, ?, ?, ?)";

        // Ejecutar la inserción en la base de datos
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, nombre);  // Establecer el nombre
            pstmt.setBigDecimal(2, monto);   // Establecer el monto usando BigDecimal
            pstmt.setInt(3, categoria);  // Establecer la categoría (índice del combo box)
            pstmt.setInt(4, catalogo);

            // Ejecutar la inserción
            pstmt.executeUpdate();

        } catch (SQLException e) {
            enviarError("Error al agregar el gasto a la base de datos.");
        }
    }


   private void mostrarTablaCostos() {
        // Definir la consulta SQL para obtener los datos de la tabla 'gastos' ordenados por 'id'
        String query = "SELECT nombre, monto, categoria, catalogo FROM sistemacontable.gastos ORDER BY id";

        // Limpiar los datos anteriores en la tabla
        DefaultTableModel model = (DefaultTableModel) gastosTbl.getModel();
        model.setRowCount(0);  // Elimina todas las filas actuales

        // Ejecutar la consulta y obtener los resultados
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {

            // Recorrer los resultados y agregar filas al modelo de la tabla
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                double monto = rs.getDouble("monto");
                int categoria = rs.getInt("categoria");
                String categoriaTexto = (categoria == 0) ? "Costos directos de fabricación" : "Gastos de comercialización";
                int catalogo = rs.getInt("catalogo");

                // Agregar la fila a la tabla
                model.addRow(new Object[]{nombre, monto, categoriaTexto, catalogo});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void moverATableResumenCostos() {
        // Consulta SELECT para obtener los datos de la tabla gastos
        String selectGastos = "SELECT id, categoria, monto FROM sistemacontable.gastos";
        String updateCosteo = "UPDATE sistemacontable.costeo SET precio = precio + ? WHERE id = ?";

        try (
            PreparedStatement pstmtSelect = conn.prepareStatement(selectGastos);
            ResultSet rs = pstmtSelect.executeQuery()) {

            // Procesamos cada fila de la tabla sistemacontable.gastos
            while (rs.next()) {
                int id = rs.getInt("id");
                int categoria = rs.getInt("categoria");
                BigDecimal monto = rs.getBigDecimal("monto");

                // Multiplicamos el monto por el número de meses
                BigDecimal montoConMeses = monto.multiply(BigDecimal.valueOf(meses));

                // Determinamos el id para actualizar en la tabla costeo
                int idToUpdate = (categoria == 0) ? 2 : 5; // id=1 si es categoría 0, id=4 si es categoría 1

                // Ejecutamos la actualización en la tabla costeo
                try (PreparedStatement pstmtUpdateCosteo = conn.prepareStatement(updateCosteo)) {
                    pstmtUpdateCosteo.setBigDecimal(1, montoConMeses); // Usamos monto multiplicado por meses
                    pstmtUpdateCosteo.setInt(2, idToUpdate);
                    pstmtUpdateCosteo.executeUpdate();
                }
            }

        } catch (SQLException e) {
            enviarError("Error al enviar a la tabla resumen de costos");
        }
    }
    private void calcularCostoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularCostoBtnActionPerformed
        dejarACeroCosteo();
        meses = Integer.parseInt(mesesTrabajoSpn.getValue().toString());
        moverATablaResumenPersonal();
        moverATableResumenCostos();
        sumarCosteo();
        mostrarTablaResumenCosteo();
        
    }//GEN-LAST:event_calcularCostoBtnActionPerformed
    private void dejarACeroCosteo() {
        String updateCosteo = "UPDATE sistemacontable.costeo SET precio = 0";

        try (
            PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {

            // Ejecutar la actualización para poner a cero el valor de la columna precio
            pstmtUpdate.executeUpdate();

            // Llama al método para actualizar la vista de la tabla (si lo deseas)
            mostrarTablaResumenCosteo();

        } catch (SQLException e) {
            enviarError("Error al actualizar los precios en la tabla costeo");
        }
    }
    private void sumarCosteo() {
        // La consulta ahora toma solo los 9 IDs fijos
        String selectCosteo = "SELECT id, precio FROM sistemacontable.costeo WHERE id IN (1, 2, 3, 4, 5, 6, 7, 8, 9)";
        String updateCosteo = "UPDATE sistemacontable.costeo SET precio = ? WHERE id = ?";

        try (
            PreparedStatement pstmtSelect = conn.prepareStatement(selectCosteo);
            ResultSet rs = pstmtSelect.executeQuery()) {

            // Array para almacenar los precios de los 9 IDs
            BigDecimal[] precios = new BigDecimal[9];

            // Procesamos los resultados y los almacenamos en el array
            while (rs.next()) {
                int id = rs.getInt("id");
                BigDecimal precio = rs.getBigDecimal("precio");
                precios[id - 1] = precio;  // Los IDs empiezan en 1, pero el array empieza en 0
            }

            // Calcular el precio de id 3 (3 = 2 + 1)
            BigDecimal precio3 = precios[1].add(precios[0]);

            // Actualizar el precio de id 3
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {
                pstmtUpdate.setBigDecimal(1, precio3.setScale(2, RoundingMode.HALF_UP));
                pstmtUpdate.setInt(2, 3);
                pstmtUpdate.executeUpdate();
            }

            // Calcular el precio de id 6 (6 = 3 + 4 + 5)
            BigDecimal precio6 = precio3.add(precios[3]).add(precios[4]);

            // Actualizar el precio de id 6
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {
                pstmtUpdate.setBigDecimal(1, precio6.setScale(2, RoundingMode.HALF_UP));
                pstmtUpdate.setInt(2, 6);
                pstmtUpdate.executeUpdate();
            }

            // Obtener el valor del porcentaje y convertirlo a BigDecimal
            BigDecimal beneficioPorcentaje = new BigDecimal(beneficioPorcentajeTxt.getText());

            // Calcular el precio de id 7 (7 = precio de id 6 * (beneficioPorcentaje / 100))
            BigDecimal precio7 = precio6.multiply(beneficioPorcentaje).divide(new BigDecimal(100), 2, RoundingMode.HALF_UP);

            // Actualizar el precio de id 7
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {
                pstmtUpdate.setBigDecimal(1, precio7.setScale(2, RoundingMode.HALF_UP));
                pstmtUpdate.setInt(2, 7);
                pstmtUpdate.executeUpdate();
            }

            // Calcular el precio de id 8 (8 = 6 + 7)
            BigDecimal precio8 = precio6.add(precio7);

            // Actualizar el precio de id 8
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {
                pstmtUpdate.setBigDecimal(1, precio8.setScale(2, RoundingMode.HALF_UP));
                pstmtUpdate.setInt(2, 8);
                pstmtUpdate.executeUpdate();
            }

            // Obtener el índice seleccionado en el combo box de frecuencia de venta
            int frecuenciaVentaIndex = frecuenciaVentaCmb.getSelectedIndex();

            // Calcular el precio de id 9 según la frecuencia seleccionada
            BigDecimal precio9;

            switch (frecuenciaVentaIndex) {
                case 0: // "Una vez"
                    // Si la frecuencia es "Una vez", el precio de id 9 es igual al precio de id 8
                    precio9 = precio8;
                    break;
                case 1: // "Un año"
                    // Si la frecuencia es "Un año", dividimos el precio de id 8 entre 12 meses
                    precio9 = precio8.divide(new BigDecimal(12), 2, RoundingMode.HALF_UP);
                    break;
                case 2: // "Dos años"
                    // Si la frecuencia es "Dos años", dividimos el precio de id 8 entre 24 meses
                    precio9 = precio8.divide(new BigDecimal(24), 2, RoundingMode.HALF_UP);
                    break;
                case 3: // "Tres años"
                    // Si la frecuencia es "Tres años", dividimos el precio de id 8 entre 36 meses
                    precio9 = precio8.divide(new BigDecimal(36), 2, RoundingMode.HALF_UP);
                    break;
                default:
                    // Si no se selecciona una opción válida, asumimos el valor de "Una vez"
                    precio9 = precio8;
            }

            // Actualizar el precio de id 9
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateCosteo)) {
                pstmtUpdate.setBigDecimal(1, precio9.setScale(2, RoundingMode.HALF_UP));
                pstmtUpdate.setInt(2, 9);
                pstmtUpdate.executeUpdate();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void mostrarMenusCierre(boolean cierreNuevo, int indice){
        cierreContableJMn.setEnabled(!cierreNuevo);
        menuJTb.setEnabledAt(0,!cierreNuevo);
        menuJTb.setSelectedIndex(indice);
        menuJTb.setEnabledAt(5,cierreNuevo);
        estadosFinanicerosJMn.setEnabled(cierreNuevo);
        agregarCuentaBtn.setEnabled(!cierreNuevo);
    }
    
    private void transferirTransaccionesALegacy() {
    String sqlInsert = "INSERT INTO sistemacontable.legacy_transacciones (numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) " +
                       "SELECT numero, fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva FROM sistemacontable.transacciones";

    try (Statement stmt = conn.createStatement()) {
        // Ejecutar la inserción
        stmt.executeUpdate(sqlInsert);
        // Opción de eliminar las transacciones después de moverlas
        String sqlDelete = "DELETE FROM sistemacontable.transacciones";
        stmt.executeUpdate(sqlDelete);
        
        System.out.println("Transacciones transferidas a legacy_transacciones con éxito.");
    } catch (SQLException ex) {
        enviarError("No se pudo transferir a legacy");
    }
}

    private void mostrarBalance(String tipoBalance) {
        DefaultTableModel modelo = (DefaultTableModel) balanceTbl.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de llenar

        String sql = "";

        switch (tipoBalance) {
            case "Balance de comprobación" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas ORDER BY codigo";
            case "Estado de resultado" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas WHERE tipo_balance = 0 ORDER BY codigo";
            case "Balance general" -> sql = "SELECT codigo, nombre, debe, haber FROM sistemacontable.cuentas WHERE tipo_balance = 1 ORDER BY codigo";
        }

        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Object[] fila = new Object[6];
                fila[0] = rs.getInt("codigo");
                fila[1] = rs.getString("nombre");
                fila[2] = rs.getBigDecimal("debe");
                fila[3] = rs.getBigDecimal("haber");
                modelo.addRow(fila);
            }
        } catch (SQLException ex) {
            enviarError("No se pudo generar balance"); // Manejo de excepciones
        }
    }

    private boolean valido(){
        try{
            LocalDate selectedDate = fechaPck.getDate();
            // Obtén la fecha de hoy
            LocalDate today = LocalDate.now();

            // Define el 1 de enero del año actual
            LocalDate startDate = LocalDate.of(today.getYear(), 1, 1);

            // Verifica que la fecha seleccionada esté entre el 1 de enero y hoy
            if((selectedDate == null) || (selectedDate.isBefore(startDate) || selectedDate.isAfter(today))){
                enviarError("Fecha no válida");
                return false;
            }
        }catch(Exception e){
            enviarError("Fecha no válida");
        }
        try{
            double monto = Double.parseDouble(montoTxt.getText());
            double descuento = Double.parseDouble(descuentoTxt.getText());
            if(monto<=0 || descuento<0){
                enviarError("Monto y Descuento deben ser positivos");
                return false;
            }
        }catch(Exception e){
            enviarError("Monto y Descuentos no pueden estar vacíos");
            return false;
        }
        try{
            if(cuentaDebeTxt.getText().isEmpty() || cuentaHaberTxt.getText().isEmpty()){
                enviarError("Los campos de las cuentas no pueden estar vacíos");
                return false;
            }
            int cuentaDebe = Integer.parseInt(cuentaDebeTxt.getText().trim());
            int cuentaHaber = Integer.parseInt(cuentaHaberTxt.getText().trim());
            String query = "SELECT COUNT(*) FROM sistemacontable.cuentas WHERE codigo = ?";

            // Verificar si ambas cuentas existen en el catálogo
            if (!existeEnCatalogo(query, cuentaDebe) || !existeEnCatalogo(query, cuentaHaber)) {
                enviarError("Las cuentas no coinciden con el catálogo");
                return false;
            }
        }catch(Exception e){
            enviarError("Erro al validar datos de las cuentas");
            return false;
        }
        if(descripcionTxt.getText().trim().isEmpty()){
            enviarError("Ingrese una descripción");
            return false;
        }
        return true;
    }
    private boolean existeEnCatalogo(String query, int cuenta) throws Exception {
        try (PreparedStatement stmt = conn.prepareStatement(query)) { // Usa la conexión existente
            stmt.setInt(1, cuenta);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Devuelve true si la cuenta existe en el catálogo
                }
            }
        }
        return false; // Devuelve false si la cuenta no existe en el catálogo
    }
    private void enviarError(String mensaje){
        JOptionPane.showMessageDialog(null, mensaje, "Error de transacción",JOptionPane.ERROR_MESSAGE);
    }
    
    private void ingresarTransaccion() {
        String sql = "INSERT INTO sistemacontable.transacciones (fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        BigDecimal monto = new BigDecimal(montoTxt.getText());
        monto = monto.subtract(new BigDecimal(descuentoTxt.getText()));

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            //pstmt.setInt(1, Integer.parseInt(numSpn.getValue().toString())); 
            pstmt.setDate(1, Date.valueOf(fechaPck.getDate()));
            pstmt.setString(2, descripcionTxt.getText());
            pstmt.setInt(3, Integer.parseInt(cuentaDebeTxt.getText().trim()));
            pstmt.setBigDecimal(4, monto);
            pstmt.setInt(5, Integer.parseInt(cuentaHaberTxt.getText().trim()));
            pstmt.setBigDecimal(6, monto);
            pstmt.setNull(7, Types.INTEGER); // O bien, puedes usar 0 si así lo requiere tu esquema
            pstmt.setNull(8, Types.DECIMAL); // O bien, puedes usar BigDecimal.ZERO si así lo requiere tu esquema

            pstmt.executeUpdate();
            modificarCuentas(
                    Integer.parseInt(cuentaDebeTxt.getText().trim()), // cuentaDebe
                    monto,                                        // montoDebe
                    Integer.parseInt(cuentaHaberTxt.getText().trim()), // cuentaHaber
                    monto,                                       // montoHaber
                    0,                                        // cuentaIVA
                    new BigDecimal(0)                                         // montoIVA
             );
            JOptionPane.showMessageDialog(null, "Transacción ingresada", "Transacción exitosa", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            enviarError("Error al ejecutar");
        }
    }
    private void ingresarTransaccion(int cuentaIVA) {
        String sql = "INSERT INTO sistemacontable.transacciones (fecha, descripcion, cuenta_debe_id, monto_debe, cuenta_haber_id, monto_haber, cuenta_iva_id, monto_iva) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        BigDecimal monto = new BigDecimal(montoTxt.getText());
        //int porcentajeSeleccionado = porcentajeCmb.getSelectedIndex();
        BigDecimal porcentajeIVA = BigDecimal.valueOf(0.13);
        BigDecimal montoIVA = monto.multiply(porcentajeIVA).setScale(2, RoundingMode.HALF_UP);
        BigDecimal montoDebe = monto;
        BigDecimal montoHaber = monto;
        
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            //pstmt.setInt(1, Integer.parseInt(numSpn.getValue().toString()));
            pstmt.setDate(1, Date.valueOf(fechaPck.getDate()));
            pstmt.setString(2, descripcionTxt.getText());
                if(cuentaIVA==115){
                    montoHaber = montoHaber.add(montoIVA);
                    pstmt.setInt(3, Integer.parseInt(cuentaDebeTxt.getText().trim()));
                    pstmt.setBigDecimal(4, montoDebe);
                    pstmt.setInt(5, Integer.parseInt(cuentaHaberTxt.getText().trim()));
                    pstmt.setBigDecimal(6, montoHaber);
                }else{
                    montoDebe = montoDebe.add(montoIVA);
                    pstmt.setInt(3, Integer.parseInt(cuentaDebeTxt.getText().trim()));
                    pstmt.setBigDecimal(4, montoDebe);
                    pstmt.setInt(5, Integer.parseInt(cuentaHaberTxt.getText().trim()));
                    pstmt.setBigDecimal(6, montoHaber);
                }
            pstmt.setInt(7, cuentaIVA);
            pstmt.setBigDecimal(8, montoIVA);

            pstmt.executeUpdate();
            modificarCuentas(
                    Integer.parseInt(cuentaDebeTxt.getText().trim()), // cuentaDebe
                    montoDebe,                                        // montoDebe
                    Integer.parseInt(cuentaHaberTxt.getText().trim()), // cuentaHaber
                    montoHaber,                                       // montoHaber
                    cuentaIVA,                                        // cuentaIVA
                    montoIVA                                         // montoIVA
             );
            JOptionPane.showMessageDialog(null, "Transacción ingresada", "Transacción exitosa", JOptionPane.PLAIN_MESSAGE);
        }catch (SQLException ex) {
            enviarError("Error al ejecutar");
        }
    }
    
    public void modificarCuentas(int cuentaDebe, BigDecimal montoDebe, int cuentaHaber, BigDecimal montoHaber, int cuentaIVA, BigDecimal montoIVA){
        String queryUpdateDebe = "UPDATE sistemacontable.cuentas SET debe = debe + ? WHERE codigo = ?";
        String queryUpdateHaber = "UPDATE sistemacontable.cuentas SET haber = haber + ? WHERE codigo = ?";
    
        try (PreparedStatement psDebe = conn.prepareStatement(queryUpdateDebe);
             PreparedStatement psHaber = conn.prepareStatement(queryUpdateHaber)) {

            // Actualizar el campo 'debe' para la cuenta deudora
            psDebe.setBigDecimal(1, montoDebe);
            psDebe.setInt(2, cuentaDebe);
            psDebe.executeUpdate();

            // Actualizar el campo 'haber' para la cuenta acreedora
            psHaber.setBigDecimal(1, montoHaber);
            psHaber.setInt(2, cuentaHaber);
            psHaber.executeUpdate();

            if(cuentaIVA==115){
                psDebe.setBigDecimal(1, montoIVA);
                psDebe.setInt(2, cuentaIVA);
                psDebe.executeUpdate();
            }else if(cuentaIVA==212){
                psHaber.setBigDecimal(1, montoIVA);
                psHaber.setInt(2, cuentaIVA);
                psHaber.executeUpdate();
            }


        } catch (SQLException e) {
            enviarError("Error al actualizar cuentas");
        }
    }
    public void cargarDatosCuentas() {
        String query = "SELECT codigo, nombre, tipo FROM sistemacontable.cuentas ORDER BY codigo";

        try {
            // Crear un modelo de tabla y limpiarlo para añadir datos
            DefaultTableModel model = (DefaultTableModel) cuentasTbl.getModel();
            model.setRowCount(0); // Limpiar las filas existentes

            // Ejecutar la consulta
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            // Llenar el modelo de tabla con los datos del ResultSet
            while (rs.next()) {
                Object[] row = {
                    rs.getString("codigo"),
                    rs.getString("nombre"),
                    rs.getString("tipo")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar datos: " + e.getMessage());
        }
    }
    private void actualizarDiarioTbl() {
        String sql = "SELECT * FROM sistemacontable.transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // Limpiar la tabla anterior antes de actualizar
            DefaultTableModel model = (DefaultTableModel) diarioTbl.getModel();
            model.setRowCount(0); // Limpiar la tabla

            // Llenar la tabla con datos de transacciones
            while (rs.next()) {
                Object[] row = new Object[] {
                    rs.getInt("numero"),
                    rs.getDate("fecha"),
                    rs.getString("descripcion"),
                    rs.getInt("cuenta_debe_id"),
                    rs.getBigDecimal("monto_debe"),
                    rs.getInt("cuenta_haber_id"),
                    rs.getBigDecimal("monto_haber"),
                    rs.getInt("cuenta_iva_id"),
                    rs.getBigDecimal("monto_iva")
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            enviarError("Error al actualizar el diario");
        }
    }
    private void actualizarDiarioTblLegacy() {
        String sql = "SELECT * FROM sistemacontable.legacy_transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // Limpiar la tabla anterior antes de actualizar
            DefaultTableModel model = (DefaultTableModel) diarioTbl.getModel();
            model.setRowCount(0); // Limpiar la tabla

            // Llenar la tabla con datos de transacciones
            while (rs.next()) {
                Object[] row = new Object[] {
                    rs.getInt("numero"),
                    rs.getDate("fecha"),
                    rs.getString("descripcion"),
                    rs.getInt("cuenta_debe_id"),
                    rs.getBigDecimal("monto_debe"),
                    rs.getInt("cuenta_haber_id"),
                    rs.getBigDecimal("monto_haber"),
                    rs.getInt("cuenta_iva_id"),
                    rs.getBigDecimal("monto_iva")
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            enviarError("Error al actualizar el diario");
        }
    }
    
    public void cargarLibroMayor() {
        String query = "SELECT codigo, nombre, saldo_inicial, debe, haber FROM sistemacontable.cuentas ORDER BY codigo";

        try {
            // Crear un modelo de tabla y limpiarlo para añadir datos
            DefaultTableModel model = (DefaultTableModel) mayorTbl.getModel();
            model.setRowCount(0); // Limpiar las filas existentes

            // Ejecutar la consulta
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            // Llenar el modelo de tabla con los datos del ResultSet
            while (rs.next()) {
                Object[] row = {
                    rs.getString("codigo"),
                    rs.getString("nombre"),
                    rs.getString("saldo_inicial"),
                    rs.getString("debe"),
                    rs.getString("haber")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar datos: " + e.getMessage());
        }
    }

   private void establecerNumeroTransaccion() {
        String sql = "SELECT MAX(numero) AS max_numero FROM sistemacontable.transacciones";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                int maxNumero = rs.getInt("max_numero");
                if (maxNumero > 0) {
                    // Si se encontró un número, incrementamos en 1
                    numSpn.setValue(maxNumero + 1);
                } else {
                    // Si no se encontró, se establece el número en 1
                    numSpn.setValue(1);
                }
            }
        } catch (SQLException ex) {
            enviarError("Error al obtener el número de transacción");
        }
    }

    private void mostrarImpuestos(boolean mostrar){
        cuentaCmb.setEnabled(mostrar);
        cuentaLbl.setEnabled(mostrar);
        porcentajeCmb.setEnabled(mostrar);
        porcentajeLbl.setEnabled(mostrar);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarCostoBtn;
    private javax.swing.JButton agregarCuentaBtn;
    private javax.swing.JCheckBox aguinaldoChk;
    private javax.swing.JTable analiticoTbl;
    private javax.swing.JMenu ayudaJMn;
    private javax.swing.JComboBox<String> balanceCmb;
    private javax.swing.JTable balanceTbl;
    private javax.swing.JMenuBar barraJMn;
    private javax.swing.JFormattedTextField beneficioPorcentajeTxt;
    private javax.swing.JButton calcularCostoBtn;
    private javax.swing.JSpinner cantidadTrabajadoresSpn;
    private javax.swing.JPanel catalogoJPn;
    private javax.swing.JComboBox<String> categoriaCuentaCmb;
    private javax.swing.JComboBox<String> categoriaPersonalCmb;
    private javax.swing.JTabbedPane categoriasCosteoJTb;
    private javax.swing.JMenuItem cierreContableJMn;
    private javax.swing.JMenuItem costeoJMn;
    private javax.swing.JPanel costosJPn;
    private javax.swing.JFormattedTextField cuentaAsociadaGastosTxt;
    private javax.swing.JFormattedTextField cuentaAsociadaPuestoTxt;
    private javax.swing.JComboBox<String> cuentaCmb;
    private javax.swing.JFormattedTextField cuentaDebeTxt;
    private javax.swing.JFormattedTextField cuentaHaberTxt;
    private javax.swing.JLabel cuentaLbl;
    private javax.swing.JTable cuentasTbl;
    private javax.swing.JTextArea descripcionTxt;
    private javax.swing.JFormattedTextField descuentoTxt;
    private javax.swing.JPanel diarioJPn;
    private javax.swing.JTable diarioTbl;
    private javax.swing.JComboBox<String> diasAguinaldoCmb;
    private javax.swing.JComboBox<String> eFCmb;
    private javax.swing.JPanel estadosFinanJPn;
    private javax.swing.JMenuItem estadosFinanicerosJMn;
    private javax.swing.JPanel estadosJPn;
    private com.github.lgooddatepicker.components.DatePicker fechaPck;
    private javax.swing.JComboBox<String> frecuenciaVentaCmb;
    private javax.swing.JComboBox<String> gastoCategoriaCmb;
    private javax.swing.JFormattedTextField gastoMontoTxt;
    private javax.swing.JTextField gastoNombreTxt;
    private javax.swing.JPanel gastosCostosJPn;
    private javax.swing.JTable gastosTbl;
    private javax.swing.JFormattedTextField horasTrabajadasTxt;
    private javax.swing.JRadioButton impuestoBtn;
    private javax.swing.JButton ingresarBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JToggleButton legacyDiarioBtn;
    private javax.swing.JPanel mayorJPn;
    private javax.swing.JTable mayorTbl;
    private javax.swing.JTabbedPane menuJTb;
    private javax.swing.JSpinner mesesTrabajoSpn;
    private javax.swing.JFormattedTextField montoTxt;
    private javax.swing.JComboBox<String> naturalezaCmb;
    private javax.swing.JButton nuevaCuentaBtn;
    private javax.swing.JRadioButton nuevaCuentaEFBtn;
    private javax.swing.JTextField nuevaCuentaNombreTxt;
    private javax.swing.JButton nuevoCicloBtn;
    private javax.swing.JButton nuevoPuestoBtn;
    private javax.swing.JSpinner numSpn;
    private javax.swing.JPanel personalJPn;
    private javax.swing.JTable personalTbl;
    private javax.swing.JComboBox<String> porcentajeCmb;
    private javax.swing.JLabel porcentajeLbl;
    private javax.swing.JPanel primerPanel;
    private javax.swing.JTextField puestoTxt;
    private javax.swing.JTable resumenCosteoTbl;
    private javax.swing.JPanel resumenJPn;
    private javax.swing.JFormattedTextField salarioTxt;
    private javax.swing.JMenuItem salirBtn;
    private javax.swing.JMenu salirJMn;
    private raven.datetime.component.date.SingleDate singleDate1;
    private javax.swing.JMenu sistemaJMn;
    private javax.swing.JMenu temasJMn;
    private javax.swing.JComboBox<String> tipoBalanceCmb;
    private javax.swing.JPanel transaccionesJPn;
    private javax.swing.JCheckBox vacacionsChk;
    // End of variables declaration//GEN-END:variables

}
